                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.0.1 #6083 (Dec 17 2010) (MINGW32)
                              4 ; This file was generated Sat Jan 22 19:18:12 2022
                              5 ;--------------------------------------------------------
                              6 	.module main
                              7 	.optsdcc -mmcs51 --model-small
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _main
                             13 	.globl _finish_setup
                             14 	.globl _server_initial
                             15 	.globl _server_action
                             16 	.globl _time_count_add
                             17 	.globl _timer0_isr
                             18 	.globl _time_initial
                             19 	.globl _ser_intr
                             20 	.globl _UART_Init
                             21 	.globl _delay_ms
                             22 	.globl _SSD_Initial
                             23 	.globl _Write7219
                             24 	.globl _sendbyte
                             25 	.globl _TF2
                             26 	.globl _EXF2
                             27 	.globl _RCLK
                             28 	.globl _TCLK
                             29 	.globl _EXEN2
                             30 	.globl _TR2
                             31 	.globl _C_T2
                             32 	.globl _CP_RL2
                             33 	.globl _T2CON_7
                             34 	.globl _T2CON_6
                             35 	.globl _T2CON_5
                             36 	.globl _T2CON_4
                             37 	.globl _T2CON_3
                             38 	.globl _T2CON_2
                             39 	.globl _T2CON_1
                             40 	.globl _T2CON_0
                             41 	.globl _PT2
                             42 	.globl _ET2
                             43 	.globl _CY
                             44 	.globl _AC
                             45 	.globl _F0
                             46 	.globl _RS1
                             47 	.globl _RS0
                             48 	.globl _OV
                             49 	.globl _F1
                             50 	.globl _P
                             51 	.globl _PS
                             52 	.globl _PT1
                             53 	.globl _PX1
                             54 	.globl _PT0
                             55 	.globl _PX0
                             56 	.globl _RD
                             57 	.globl _WR
                             58 	.globl _T1
                             59 	.globl _T0
                             60 	.globl _INT1
                             61 	.globl _INT0
                             62 	.globl _TXD
                             63 	.globl _RXD
                             64 	.globl _P3_7
                             65 	.globl _P3_6
                             66 	.globl _P3_5
                             67 	.globl _P3_4
                             68 	.globl _P3_3
                             69 	.globl _P3_2
                             70 	.globl _P3_1
                             71 	.globl _P3_0
                             72 	.globl _EA
                             73 	.globl _ES
                             74 	.globl _ET1
                             75 	.globl _EX1
                             76 	.globl _ET0
                             77 	.globl _EX0
                             78 	.globl _P2_7
                             79 	.globl _P2_6
                             80 	.globl _P2_5
                             81 	.globl _P2_4
                             82 	.globl _P2_3
                             83 	.globl _P2_2
                             84 	.globl _P2_1
                             85 	.globl _P2_0
                             86 	.globl _SM0
                             87 	.globl _SM1
                             88 	.globl _SM2
                             89 	.globl _REN
                             90 	.globl _TB8
                             91 	.globl _RB8
                             92 	.globl _TI
                             93 	.globl _RI
                             94 	.globl _P1_7
                             95 	.globl _P1_6
                             96 	.globl _P1_5
                             97 	.globl _P1_4
                             98 	.globl _P1_3
                             99 	.globl _P1_2
                            100 	.globl _P1_1
                            101 	.globl _P1_0
                            102 	.globl _TF1
                            103 	.globl _TR1
                            104 	.globl _TF0
                            105 	.globl _TR0
                            106 	.globl _IE1
                            107 	.globl _IT1
                            108 	.globl _IE0
                            109 	.globl _IT0
                            110 	.globl _P0_7
                            111 	.globl _P0_6
                            112 	.globl _P0_5
                            113 	.globl _P0_4
                            114 	.globl _P0_3
                            115 	.globl _P0_2
                            116 	.globl _P0_1
                            117 	.globl _P0_0
                            118 	.globl _TH2
                            119 	.globl _TL2
                            120 	.globl _RCAP2H
                            121 	.globl _RCAP2L
                            122 	.globl _T2CON
                            123 	.globl _B
                            124 	.globl _ACC
                            125 	.globl _PSW
                            126 	.globl _IP
                            127 	.globl _P3
                            128 	.globl _IE
                            129 	.globl _P2
                            130 	.globl _SBUF
                            131 	.globl _SCON
                            132 	.globl _P1
                            133 	.globl _TH1
                            134 	.globl _TH0
                            135 	.globl _TL1
                            136 	.globl _TL0
                            137 	.globl _TMOD
                            138 	.globl _TCON
                            139 	.globl _PCON
                            140 	.globl _DPH
                            141 	.globl _DPL
                            142 	.globl _SP
                            143 	.globl _P0
                            144 	.globl _i
                            145 	.globl _BT_data_flag
                            146 	.globl _BT_data
                            147 	.globl _change_time
                            148 	.globl _Action
                            149 	.globl _PWM_state
                            150 	.globl _T_sec
                            151 	.globl _T_min
                            152 	.globl _T_hour
                            153 	.globl _time_count
                            154 	.globl _temp
                            155 	.globl _toff
                            156 	.globl _ton
                            157 	.globl _dutytime
                            158 ;--------------------------------------------------------
                            159 ; special function registers
                            160 ;--------------------------------------------------------
                            161 	.area RSEG    (ABS,DATA)
   0000                     162 	.org 0x0000
                    0080    163 _P0	=	0x0080
                    0081    164 _SP	=	0x0081
                    0082    165 _DPL	=	0x0082
                    0083    166 _DPH	=	0x0083
                    0087    167 _PCON	=	0x0087
                    0088    168 _TCON	=	0x0088
                    0089    169 _TMOD	=	0x0089
                    008A    170 _TL0	=	0x008a
                    008B    171 _TL1	=	0x008b
                    008C    172 _TH0	=	0x008c
                    008D    173 _TH1	=	0x008d
                    0090    174 _P1	=	0x0090
                    0098    175 _SCON	=	0x0098
                    0099    176 _SBUF	=	0x0099
                    00A0    177 _P2	=	0x00a0
                    00A8    178 _IE	=	0x00a8
                    00B0    179 _P3	=	0x00b0
                    00B8    180 _IP	=	0x00b8
                    00D0    181 _PSW	=	0x00d0
                    00E0    182 _ACC	=	0x00e0
                    00F0    183 _B	=	0x00f0
                    00C8    184 _T2CON	=	0x00c8
                    00CA    185 _RCAP2L	=	0x00ca
                    00CB    186 _RCAP2H	=	0x00cb
                    00CC    187 _TL2	=	0x00cc
                    00CD    188 _TH2	=	0x00cd
                            189 ;--------------------------------------------------------
                            190 ; special function bits
                            191 ;--------------------------------------------------------
                            192 	.area RSEG    (ABS,DATA)
   0000                     193 	.org 0x0000
                    0080    194 _P0_0	=	0x0080
                    0081    195 _P0_1	=	0x0081
                    0082    196 _P0_2	=	0x0082
                    0083    197 _P0_3	=	0x0083
                    0084    198 _P0_4	=	0x0084
                    0085    199 _P0_5	=	0x0085
                    0086    200 _P0_6	=	0x0086
                    0087    201 _P0_7	=	0x0087
                    0088    202 _IT0	=	0x0088
                    0089    203 _IE0	=	0x0089
                    008A    204 _IT1	=	0x008a
                    008B    205 _IE1	=	0x008b
                    008C    206 _TR0	=	0x008c
                    008D    207 _TF0	=	0x008d
                    008E    208 _TR1	=	0x008e
                    008F    209 _TF1	=	0x008f
                    0090    210 _P1_0	=	0x0090
                    0091    211 _P1_1	=	0x0091
                    0092    212 _P1_2	=	0x0092
                    0093    213 _P1_3	=	0x0093
                    0094    214 _P1_4	=	0x0094
                    0095    215 _P1_5	=	0x0095
                    0096    216 _P1_6	=	0x0096
                    0097    217 _P1_7	=	0x0097
                    0098    218 _RI	=	0x0098
                    0099    219 _TI	=	0x0099
                    009A    220 _RB8	=	0x009a
                    009B    221 _TB8	=	0x009b
                    009C    222 _REN	=	0x009c
                    009D    223 _SM2	=	0x009d
                    009E    224 _SM1	=	0x009e
                    009F    225 _SM0	=	0x009f
                    00A0    226 _P2_0	=	0x00a0
                    00A1    227 _P2_1	=	0x00a1
                    00A2    228 _P2_2	=	0x00a2
                    00A3    229 _P2_3	=	0x00a3
                    00A4    230 _P2_4	=	0x00a4
                    00A5    231 _P2_5	=	0x00a5
                    00A6    232 _P2_6	=	0x00a6
                    00A7    233 _P2_7	=	0x00a7
                    00A8    234 _EX0	=	0x00a8
                    00A9    235 _ET0	=	0x00a9
                    00AA    236 _EX1	=	0x00aa
                    00AB    237 _ET1	=	0x00ab
                    00AC    238 _ES	=	0x00ac
                    00AF    239 _EA	=	0x00af
                    00B0    240 _P3_0	=	0x00b0
                    00B1    241 _P3_1	=	0x00b1
                    00B2    242 _P3_2	=	0x00b2
                    00B3    243 _P3_3	=	0x00b3
                    00B4    244 _P3_4	=	0x00b4
                    00B5    245 _P3_5	=	0x00b5
                    00B6    246 _P3_6	=	0x00b6
                    00B7    247 _P3_7	=	0x00b7
                    00B0    248 _RXD	=	0x00b0
                    00B1    249 _TXD	=	0x00b1
                    00B2    250 _INT0	=	0x00b2
                    00B3    251 _INT1	=	0x00b3
                    00B4    252 _T0	=	0x00b4
                    00B5    253 _T1	=	0x00b5
                    00B6    254 _WR	=	0x00b6
                    00B7    255 _RD	=	0x00b7
                    00B8    256 _PX0	=	0x00b8
                    00B9    257 _PT0	=	0x00b9
                    00BA    258 _PX1	=	0x00ba
                    00BB    259 _PT1	=	0x00bb
                    00BC    260 _PS	=	0x00bc
                    00D0    261 _P	=	0x00d0
                    00D1    262 _F1	=	0x00d1
                    00D2    263 _OV	=	0x00d2
                    00D3    264 _RS0	=	0x00d3
                    00D4    265 _RS1	=	0x00d4
                    00D5    266 _F0	=	0x00d5
                    00D6    267 _AC	=	0x00d6
                    00D7    268 _CY	=	0x00d7
                    00AD    269 _ET2	=	0x00ad
                    00BD    270 _PT2	=	0x00bd
                    00C8    271 _T2CON_0	=	0x00c8
                    00C9    272 _T2CON_1	=	0x00c9
                    00CA    273 _T2CON_2	=	0x00ca
                    00CB    274 _T2CON_3	=	0x00cb
                    00CC    275 _T2CON_4	=	0x00cc
                    00CD    276 _T2CON_5	=	0x00cd
                    00CE    277 _T2CON_6	=	0x00ce
                    00CF    278 _T2CON_7	=	0x00cf
                    00C8    279 _CP_RL2	=	0x00c8
                    00C9    280 _C_T2	=	0x00c9
                    00CA    281 _TR2	=	0x00ca
                    00CB    282 _EXEN2	=	0x00cb
                    00CC    283 _TCLK	=	0x00cc
                    00CD    284 _RCLK	=	0x00cd
                    00CE    285 _EXF2	=	0x00ce
                    00CF    286 _TF2	=	0x00cf
                            287 ;--------------------------------------------------------
                            288 ; overlayable register banks
                            289 ;--------------------------------------------------------
                            290 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                     291 	.ds 8
                            292 	.area REG_BANK_1	(REL,OVR,DATA)
   0000                     293 	.ds 8
                            294 ;--------------------------------------------------------
                            295 ; internal ram data
                            296 ;--------------------------------------------------------
                            297 	.area DSEG    (DATA)
   0000                     298 _dutytime::
   0000                     299 	.ds 2
   0002                     300 _ton::
   0002                     301 	.ds 2
   0004                     302 _toff::
   0004                     303 	.ds 2
   0006                     304 _temp::
   0006                     305 	.ds 2
   0008                     306 _time_count::
   0008                     307 	.ds 2
   000A                     308 _T_hour::
   000A                     309 	.ds 1
   000B                     310 _T_min::
   000B                     311 	.ds 1
   000C                     312 _T_sec::
   000C                     313 	.ds 1
   000D                     314 _PWM_state::
   000D                     315 	.ds 1
   000E                     316 _Action::
   000E                     317 	.ds 1
   000F                     318 _change_time::
   000F                     319 	.ds 1
   0010                     320 _BT_data::
   0010                     321 	.ds 1
   0011                     322 _BT_data_flag::
   0011                     323 	.ds 1
   0012                     324 _i::
   0012                     325 	.ds 1
                            326 ;--------------------------------------------------------
                            327 ; overlayable items in internal ram 
                            328 ;--------------------------------------------------------
                            329 	.area OSEG    (OVR,DATA)
                            330 ;--------------------------------------------------------
                            331 ; Stack segment in internal ram 
                            332 ;--------------------------------------------------------
                            333 	.area	SSEG	(DATA)
   0000                     334 __start__stack:
   0000                     335 	.ds	1
                            336 
                            337 ;--------------------------------------------------------
                            338 ; indirectly addressable internal ram data
                            339 ;--------------------------------------------------------
                            340 	.area ISEG    (DATA)
                            341 ;--------------------------------------------------------
                            342 ; absolute internal ram data
                            343 ;--------------------------------------------------------
                            344 	.area IABS    (ABS,DATA)
                            345 	.area IABS    (ABS,DATA)
                            346 ;--------------------------------------------------------
                            347 ; bit data
                            348 ;--------------------------------------------------------
                            349 	.area BSEG    (BIT)
                            350 ;--------------------------------------------------------
                            351 ; paged external ram data
                            352 ;--------------------------------------------------------
                            353 	.area PSEG    (PAG,XDATA)
                            354 ;--------------------------------------------------------
                            355 ; external ram data
                            356 ;--------------------------------------------------------
                            357 	.area XSEG    (XDATA)
                            358 ;--------------------------------------------------------
                            359 ; absolute external ram data
                            360 ;--------------------------------------------------------
                            361 	.area XABS    (ABS,XDATA)
                            362 ;--------------------------------------------------------
                            363 ; external initialized ram data
                            364 ;--------------------------------------------------------
                            365 	.area XISEG   (XDATA)
                            366 	.area HOME    (CODE)
                            367 	.area GSINIT0 (CODE)
                            368 	.area GSINIT1 (CODE)
                            369 	.area GSINIT2 (CODE)
                            370 	.area GSINIT3 (CODE)
                            371 	.area GSINIT4 (CODE)
                            372 	.area GSINIT5 (CODE)
                            373 	.area GSINIT  (CODE)
                            374 	.area GSFINAL (CODE)
                            375 	.area CSEG    (CODE)
                            376 ;--------------------------------------------------------
                            377 ; interrupt vector 
                            378 ;--------------------------------------------------------
                            379 	.area HOME    (CODE)
   0000                     380 __interrupt_vect:
   0000 02s00r00            381 	ljmp	__sdcc_gsinit_startup
   0003 32                  382 	reti
   0004                     383 	.ds	7
   000B 02s01r3E            384 	ljmp	_timer0_isr
   000E                     385 	.ds	5
   0013 32                  386 	reti
   0014                     387 	.ds	7
   001B 02s01rBB            388 	ljmp	_time_count_add
   001E                     389 	.ds	5
   0023 32                  390 	reti
   0024                     391 	.ds	7
   002B 02s00rEF            392 	ljmp	_ser_intr
                            393 ;--------------------------------------------------------
                            394 ; global & static initialisations
                            395 ;--------------------------------------------------------
                            396 	.area HOME    (CODE)
                            397 	.area GSINIT  (CODE)
                            398 	.area GSFINAL (CODE)
                            399 	.area GSINIT  (CODE)
                            400 	.globl __sdcc_gsinit_startup
                            401 	.globl __sdcc_program_startup
                            402 	.globl __start__stack
                            403 	.globl __mcs51_genXINIT
                            404 	.globl __mcs51_genXRAMCLEAR
                            405 	.globl __mcs51_genRAMCLEAR
                            406 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:14: unsigned int dutytime = 35536; //65536-45536就是責任週期
   0000 75*00 D0            407 	mov	_dutytime,#0xD0
   0003 75*01 8A            408 	mov	(_dutytime + 1),#0x8A
                            409 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:15: unsigned int ton = 15000; //高電位比例=50%
   0006 75*02 98            410 	mov	_ton,#0x98
   0009 75*03 3A            411 	mov	(_ton + 1),#0x3A
                            412 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:16: unsigned int toff = 15000; //低電位比例=50%
   000C 75*04 98            413 	mov	_toff,#0x98
   000F 75*05 3A            414 	mov	(_toff + 1),#0x3A
                            415 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:18: unsigned int time_count = 0;
   0012 E4                  416 	clr	a
   0013 F5*08               417 	mov	_time_count,a
   0015 F5*09               418 	mov	(_time_count + 1),a
                            419 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:19: signed char T_hour = 3, T_min = 28, T_sec = 0;
   0017 75*0A 03            420 	mov	_T_hour,#0x03
                            421 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:19: unsigned char PWM_state = 0;
   001A 75*0B 1C            422 	mov	_T_min,#0x1C
                            423 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:19: signed char T_hour = 3, T_min = 28, T_sec = 0;
   001D 75*0C 00            424 	mov	_T_sec,#0x00
                            425 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:20: unsigned char PWM_state = 0;
   0020 75*0D 00            426 	mov	_PWM_state,#0x00
                            427 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:21: unsigned char Action = 0; // 1: open, 2: close
   0023 75*0E 00            428 	mov	_Action,#0x00
                            429 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:22: unsigned char change_time = 0;
   0026 75*0F 00            430 	mov	_change_time,#0x00
                            431 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:23: char BT_data = ' ';
   0029 75*10 20            432 	mov	_BT_data,#0x20
                            433 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:24: char BT_data_flag = 0;
   002C 75*11 00            434 	mov	_BT_data_flag,#0x00
                            435 	.area GSFINAL (CODE)
   0000 02s00r2E            436 	ljmp	__sdcc_program_startup
                            437 ;--------------------------------------------------------
                            438 ; Home
                            439 ;--------------------------------------------------------
                            440 	.area HOME    (CODE)
                            441 	.area HOME    (CODE)
   002E                     442 __sdcc_program_startup:
   002E 12s02r71            443 	lcall	_main
                            444 ;	return from main will lock up
   0031 80 FE               445 	sjmp .
                            446 ;--------------------------------------------------------
                            447 ; code
                            448 ;--------------------------------------------------------
                            449 	.area CSEG    (CODE)
                            450 ;------------------------------------------------------------
                            451 ;Allocation info for local variables in function 'sendbyte'
                            452 ;------------------------------------------------------------
                            453 ;dat                       Allocated to stack - offset -3
                            454 ;address                   Allocated to registers r2 
                            455 ;i                         Allocated to registers r3 
                            456 ;------------------------------------------------------------
                            457 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:27: void sendbyte(unsigned char address,unsigned char dat) {
                            458 ;	-----------------------------------------
                            459 ;	 function sendbyte
                            460 ;	-----------------------------------------
   0000                     461 _sendbyte:
                    0002    462 	ar2 = 0x02
                    0003    463 	ar3 = 0x03
                    0004    464 	ar4 = 0x04
                    0005    465 	ar5 = 0x05
                    0006    466 	ar6 = 0x06
                    0007    467 	ar7 = 0x07
                    0000    468 	ar0 = 0x00
                    0001    469 	ar1 = 0x01
   0000 C0*00               470 	push	_bp
   0002 85 81*00            471 	mov	_bp,sp
   0005 AA 82               472 	mov	r2,dpl
                            473 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:29: for (i=0;i<8;i++) {
   0007 7B 00               474 	mov	r3,#0x00
   0009                     475 00101$:
   0009 BB 08 00            476 	cjne	r3,#0x08,00117$
   000C                     477 00117$:
   000C 50 0C               478 	jnc	00104$
                            479 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:30: CLK=0;
   000E C2 B6               480 	clr	_P3_6
                            481 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:31: DIN=(address&0x80);
                            482 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:32: address<<=1;
   0010 EA                  483 	mov	a,r2
   0011 2A                  484 	add	a,r2
   0012 92 B4               485 	mov	_P3_4,c
   0014 FA                  486 	mov	r2,a
                            487 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:33: CLK=1;
   0015 D2 B6               488 	setb	_P3_6
                            489 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:29: for (i=0;i<8;i++) {
   0017 0B                  490 	inc	r3
   0018 80 EF               491 	sjmp	00101$
   001A                     492 00104$:
                            493 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:35: for (i=0;i<8;i++) {
   001A 7A 00               494 	mov	r2,#0x00
   001C                     495 00105$:
   001C BA 08 00            496 	cjne	r2,#0x08,00119$
   001F                     497 00119$:
   001F 50 19               498 	jnc	00109$
                            499 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:36: CLK=0;
   0021 C2 B6               500 	clr	_P3_6
                            501 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:37: DIN=(dat&0x80);
   0023 E5*00               502 	mov	a,_bp
   0025 24 FD               503 	add	a,#0xfd
   0027 F8                  504 	mov	r0,a
   0028 E6                  505 	mov	a,@r0
   0029 33                  506 	rlc	a
   002A 92 B4               507 	mov	_P3_4,c
                            508 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:38: dat<<=1;
   002C E5*00               509 	mov	a,_bp
   002E 24 FD               510 	add	a,#0xfd
   0030 F8                  511 	mov	r0,a
   0031 E6                  512 	mov	a,@r0
   0032 25 E0               513 	add	a,acc
   0034 F6                  514 	mov	@r0,a
                            515 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:39: CLK=1;
   0035 D2 B6               516 	setb	_P3_6
                            517 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:35: for (i=0;i<8;i++) {
   0037 0A                  518 	inc	r2
   0038 80 E2               519 	sjmp	00105$
   003A                     520 00109$:
   003A D0*00               521 	pop	_bp
   003C 22                  522 	ret
                            523 ;------------------------------------------------------------
                            524 ;Allocation info for local variables in function 'Write7219'
                            525 ;------------------------------------------------------------
                            526 ;dat                       Allocated to stack - offset -3
                            527 ;address                   Allocated to registers r2 
                            528 ;cnt                       Allocated to registers r3 
                            529 ;------------------------------------------------------------
                            530 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:43: void Write7219(unsigned char address,unsigned char dat) {
                            531 ;	-----------------------------------------
                            532 ;	 function Write7219
                            533 ;	-----------------------------------------
   003D                     534 _Write7219:
   003D C0*00               535 	push	_bp
   003F 85 81*00            536 	mov	_bp,sp
   0042 AA 82               537 	mov	r2,dpl
                            538 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:45: LOAD=0;
   0044 C2 B5               539 	clr	_P3_5
                            540 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:46: for(cnt=1;cnt<=matrixnum;cnt++) sendbyte(address,dat);
   0046 7B 01               541 	mov	r3,#0x01
   0048                     542 00103$:
   0048 C0 02               543 	push	ar2
   004A C0 03               544 	push	ar3
   004C E5*00               545 	mov	a,_bp
   004E 24 FD               546 	add	a,#0xfd
   0050 F8                  547 	mov	r0,a
   0051 E6                  548 	mov	a,@r0
   0052 C0 E0               549 	push	acc
   0054 8A 82               550 	mov	dpl,r2
   0056 12s00r00            551 	lcall	_sendbyte
   0059 15 81               552 	dec	sp
   005B D0 03               553 	pop	ar3
   005D D0 02               554 	pop	ar2
   005F DB E7               555 	djnz	r3,00103$
                            556 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:47: LOAD=1;                  
   0061 D2 B5               557 	setb	_P3_5
   0063 D0*00               558 	pop	_bp
   0065 22                  559 	ret
                            560 ;------------------------------------------------------------
                            561 ;Allocation info for local variables in function 'SSD_Initial'
                            562 ;------------------------------------------------------------
                            563 ;i                         Allocated to registers r2 
                            564 ;------------------------------------------------------------
                            565 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:50: void SSD_Initial(void) {
                            566 ;	-----------------------------------------
                            567 ;	 function SSD_Initial
                            568 ;	-----------------------------------------
   0066                     569 _SSD_Initial:
                            570 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:52: Write7219(SHUT_DOWN,0x01);
   0066 74 01               571 	mov	a,#0x01
   0068 C0 E0               572 	push	acc
   006A 75 82 0C            573 	mov	dpl,#0x0C
   006D 12s00r3D            574 	lcall	_Write7219
   0070 15 81               575 	dec	sp
                            576 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:53: Write7219(DISPLAY_TEST,0x00);
   0072 E4                  577 	clr	a
   0073 C0 E0               578 	push	acc
   0075 75 82 0F            579 	mov	dpl,#0x0F
   0078 12s00r3D            580 	lcall	_Write7219
   007B 15 81               581 	dec	sp
                            582 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:54: Write7219(DECODE_MODE,0xff);
   007D 74 FF               583 	mov	a,#0xFF
   007F C0 E0               584 	push	acc
   0081 75 82 09            585 	mov	dpl,#0x09
   0084 12s00r3D            586 	lcall	_Write7219
   0087 15 81               587 	dec	sp
                            588 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:55: Write7219(SCAN_LIMIT,0x07);
   0089 74 07               589 	mov	a,#0x07
   008B C0 E0               590 	push	acc
   008D 75 82 0B            591 	mov	dpl,#0x0B
   0090 12s00r3D            592 	lcall	_Write7219
   0093 15 81               593 	dec	sp
                            594 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:56: Write7219(INTENSITY,0x00);
   0095 E4                  595 	clr	a
   0096 C0 E0               596 	push	acc
   0098 75 82 0A            597 	mov	dpl,#0x0A
   009B 12s00r3D            598 	lcall	_Write7219
   009E 15 81               599 	dec	sp
                            600 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:57: for(i=1;i<=8;i++) Write7219(i,0x0f);
   00A0 7A 01               601 	mov	r2,#0x01
   00A2                     602 00101$:
   00A2 74 08               603 	mov	a,#0x08
   00A4 B5 02 00            604 	cjne	a,ar2,00110$
   00A7                     605 00110$:
   00A7 40 12               606 	jc	00105$
   00A9 C0 02               607 	push	ar2
   00AB 74 0F               608 	mov	a,#0x0F
   00AD C0 E0               609 	push	acc
   00AF 8A 82               610 	mov	dpl,r2
   00B1 12s00r3D            611 	lcall	_Write7219
   00B4 15 81               612 	dec	sp
   00B6 D0 02               613 	pop	ar2
   00B8 0A                  614 	inc	r2
   00B9 80 E7               615 	sjmp	00101$
   00BB                     616 00105$:
   00BB 22                  617 	ret
                            618 ;------------------------------------------------------------
                            619 ;Allocation info for local variables in function 'delay_ms'
                            620 ;------------------------------------------------------------
                            621 ;ms                        Allocated to registers r2 r3 
                            622 ;i                         Allocated to registers r4 r5 
                            623 ;j                         Allocated to registers r6 
                            624 ;------------------------------------------------------------
                            625 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:60: void delay_ms(int ms) {
                            626 ;	-----------------------------------------
                            627 ;	 function delay_ms
                            628 ;	-----------------------------------------
   00BC                     629 _delay_ms:
   00BC AA 82               630 	mov	r2,dpl
   00BE AB 83               631 	mov	r3,dph
                            632 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:63: for (i = 0; i < ms; i++) {
   00C0 7C 00               633 	mov	r4,#0x00
   00C2 7D 00               634 	mov	r5,#0x00
   00C4                     635 00104$:
   00C4 C3                  636 	clr	c
   00C5 EC                  637 	mov	a,r4
   00C6 9A                  638 	subb	a,r2
   00C7 ED                  639 	mov	a,r5
   00C8 9B                  640 	subb	a,r3
   00C9 50 0B               641 	jnc	00108$
                            642 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:64: for (j = 0; j < 90; j++);
   00CB 7E 5A               643 	mov	r6,#0x5A
   00CD                     644 00103$:
   00CD DE FE               645 	djnz	r6,00103$
                            646 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:63: for (i = 0; i < ms; i++) {
   00CF 0C                  647 	inc	r4
   00D0 BC 00 F1            648 	cjne	r4,#0x00,00104$
   00D3 0D                  649 	inc	r5
   00D4 80 EE               650 	sjmp	00104$
   00D6                     651 00108$:
   00D6 22                  652 	ret
                            653 ;------------------------------------------------------------
                            654 ;Allocation info for local variables in function 'UART_Init'
                            655 ;------------------------------------------------------------
                            656 ;------------------------------------------------------------
                            657 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:68: void UART_Init()
                            658 ;	-----------------------------------------
                            659 ;	 function UART_Init
                            660 ;	-----------------------------------------
   00D7                     661 _UART_Init:
                            662 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:70: TMOD |= 0x200;
   00D7 AA 89               663 	mov	r2,_TMOD
   00D9 7B 00               664 	mov	r3,#0x00
   00DB 43 03 02            665 	orl	ar3,#0x02
   00DE 8A 89               666 	mov	_TMOD,r2
                            667 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:71: TH2 = 0xFD;
   00E0 75 CD FD            668 	mov	_TH2,#0xFD
                            669 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:72: TL2 = 1;
   00E3 75 CC 01            670 	mov	_TL2,#0x01
                            671 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:73: SCON = 0x50;
   00E6 75 98 50            672 	mov	_SCON,#0x50
                            673 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:74: IE |= 0x90;
   00E9 43 A8 90            674 	orl	_IE,#0x90
                            675 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:75: TR2 = 1;
   00EC D2 CA               676 	setb	_TR2
   00EE 22                  677 	ret
                            678 ;------------------------------------------------------------
                            679 ;Allocation info for local variables in function 'ser_intr'
                            680 ;------------------------------------------------------------
                            681 ;------------------------------------------------------------
                            682 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:78: void ser_intr(void) __interrupt 5      //Subroutine for Interrupt  
                            683 ;	-----------------------------------------
                            684 ;	 function ser_intr
                            685 ;	-----------------------------------------
   00EF                     686 _ser_intr:
   00EF C0 E0               687 	push	acc
                            688 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:80: while(RI==0);
   00F1                     689 00101$:
   00F1 30 98 FD            690 	jnb	_RI,00101$
                            691 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:81: BT_data = SBUF;
   00F4 85 99*10            692 	mov	_BT_data,_SBUF
                            693 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:82: TH2 = 0xFD;
   00F7 75 CD FD            694 	mov	_TH2,#0xFD
                            695 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:83: TL2 = 1;
   00FA 75 CC 01            696 	mov	_TL2,#0x01
                            697 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:84: TF2 = 0;
   00FD C2 CF               698 	clr	_TF2
                            699 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:85: EXF2 = 0;
   00FF C2 CE               700 	clr	_EXF2
                            701 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:86: P1 = ~P1;
   0101 E5 90               702 	mov	a,_P1
   0103 F4                  703 	cpl	a
   0104 F5 90               704 	mov	_P1,a
   0106 D0 E0               705 	pop	acc
   0108 32                  706 	reti
                            707 ;	eliminated unneeded push/pop psw
                            708 ;	eliminated unneeded push/pop dpl
                            709 ;	eliminated unneeded push/pop dph
                            710 ;	eliminated unneeded push/pop b
                            711 ;------------------------------------------------------------
                            712 ;Allocation info for local variables in function 'time_initial'
                            713 ;------------------------------------------------------------
                            714 ;------------------------------------------------------------
                            715 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:91: void time_initial(void) {
                            716 ;	-----------------------------------------
                            717 ;	 function time_initial
                            718 ;	-----------------------------------------
   0109                     719 _time_initial:
                            720 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:92: TMOD = 0x11;  // Set Timer 1 to  mode 0 & Timer 0 mode 1. (16-bit timer)
   0109 75 89 11            721 	mov	_TMOD,#0x11
                            722 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:93: IE|=0x02; //開啟計時器中斷功能
   010C 43 A8 02            723 	orl	_IE,#0x02
                            724 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:94: temp = 65536 - dutytime; //設定中斷一次的時間(預設是dutytime)
   010F AA*00               725 	mov	r2,_dutytime
   0111 AB*01               726 	mov	r3,(_dutytime + 1)
   0113 E4                  727 	clr	a
   0114 FC                  728 	mov	r4,a
   0115 FD                  729 	mov	r5,a
   0116 C3                  730 	clr	c
   0117 9A                  731 	subb	a,r2
   0118 FA                  732 	mov	r2,a
   0119 E4                  733 	clr	a
   011A 9B                  734 	subb	a,r3
   011B FB                  735 	mov	r3,a
   011C 74 01               736 	mov	a,#0x01
   011E 9C                  737 	subb	a,r4
   011F E4                  738 	clr	a
   0120 9D                  739 	subb	a,r5
   0121 8A*06               740 	mov	_temp,r2
   0123 8B*07               741 	mov	(_temp + 1),r3
                            742 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:95: TH0 = temp / 256; //填入高八位
   0125 AA*07               743 	mov	r2,(_temp + 1)
   0127 8A 8C               744 	mov	_TH0,r2
                            745 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:96: TL0 = temp % 256; //填入低八位
   0129 AA*06               746 	mov	r2,_temp
   012B 8A 8A               747 	mov	_TL0,r2
                            748 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:97: TH1 = (65536-1000) / 256;   // Load initial higher 8 bits into Timer 1
   012D 75 8D FC            749 	mov	_TH1,#0xFC
                            750 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:98: TL1 = (65536-1000) % 256;   // Load initial lower 8 bits into Timer 1
   0130 75 8B 18            751 	mov	_TL1,#0x18
                            752 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:99: EA = 1;                // Enable all interrupt
   0133 D2 AF               753 	setb	_EA
                            754 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:100: ET0 = 1;            // Enable Timer 0 interrupt
   0135 D2 A9               755 	setb	_ET0
                            756 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:101: TR0 = 1;            // Start Timer 0
   0137 D2 8C               757 	setb	_TR0
                            758 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:102: ET1 = 1;            // Enable Timer 1 interrupt
   0139 D2 AB               759 	setb	_ET1
                            760 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:103: TR1 = 1;             // Start Timer 1
   013B D2 8E               761 	setb	_TR1
   013D 22                  762 	ret
                            763 ;------------------------------------------------------------
                            764 ;Allocation info for local variables in function 'timer0_isr'
                            765 ;------------------------------------------------------------
                            766 ;------------------------------------------------------------
                            767 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:107: void timer0_isr(void) __interrupt TF0_VECTOR __using 1 {
                            768 ;	-----------------------------------------
                            769 ;	 function timer0_isr
                            770 ;	-----------------------------------------
   013E                     771 _timer0_isr:
                    000A    772 	ar2 = 0x0a
                    000B    773 	ar3 = 0x0b
                    000C    774 	ar4 = 0x0c
                    000D    775 	ar5 = 0x0d
                    000E    776 	ar6 = 0x0e
                    000F    777 	ar7 = 0x0f
                    0008    778 	ar0 = 0x08
                    0009    779 	ar1 = 0x09
   013E C0 E0               780 	push	acc
   0140 C0 D0               781 	push	psw
   0142 75 D0 08            782 	mov	psw,#0x08
                            783 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:108: if (PWM_state == 1) {
   0145 74 01               784 	mov	a,#0x01
   0147 B5*0D 37            785 	cjne	a,_PWM_state,00112$
                            786 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:109: temp = 65536 - toff;
   014A AA*04               787 	mov	r2,_toff
   014C AB*05               788 	mov	r3,(_toff + 1)
   014E E4                  789 	clr	a
   014F FC                  790 	mov	r4,a
   0150 FD                  791 	mov	r5,a
   0151 C3                  792 	clr	c
   0152 9A                  793 	subb	a,r2
   0153 FA                  794 	mov	r2,a
   0154 E4                  795 	clr	a
   0155 9B                  796 	subb	a,r3
   0156 FB                  797 	mov	r3,a
   0157 74 01               798 	mov	a,#0x01
   0159 9C                  799 	subb	a,r4
   015A FC                  800 	mov	r4,a
   015B E4                  801 	clr	a
   015C 9D                  802 	subb	a,r5
   015D FD                  803 	mov	r5,a
   015E 8A*06               804 	mov	_temp,r2
   0160 8B*07               805 	mov	(_temp + 1),r3
                            806 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:110: TH0 = temp / 256;
   0162 AA*07               807 	mov	r2,(_temp + 1)
   0164 8A 8C               808 	mov	_TH0,r2
                            809 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:111: TL0 = temp % 256;
   0166 AA*06               810 	mov	r2,_temp
   0168 7B 00               811 	mov	r3,#0x00
   016A 8A 8A               812 	mov	_TL0,r2
                            813 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:112: if (Action == 1) {
   016C 74 01               814 	mov	a,#0x01
   016E B5*0E 04            815 	cjne	a,_Action,00104$
                            816 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:113: P2_7 = 0;
   0171 C2 A7               817 	clr	_P2_7
   0173 80 07               818 	sjmp	00105$
   0175                     819 00104$:
                            820 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:114: } else if (Action == 2) {
   0175 74 02               821 	mov	a,#0x02
   0177 B5*0E 02            822 	cjne	a,_Action,00105$
                            823 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:115: P2_6 = 0;
   017A C2 A6               824 	clr	_P2_6
   017C                     825 00105$:
                            826 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:117: PWM_state = 0;
   017C 75*0D 00            827 	mov	_PWM_state,#0x00
   017F 80 35               828 	sjmp	00114$
   0181                     829 00112$:
                            830 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:119: temp = 65536 - ton;
   0181 AA*02               831 	mov	r2,_ton
   0183 AB*03               832 	mov	r3,(_ton + 1)
   0185 E4                  833 	clr	a
   0186 FC                  834 	mov	r4,a
   0187 FD                  835 	mov	r5,a
   0188 C3                  836 	clr	c
   0189 9A                  837 	subb	a,r2
   018A FA                  838 	mov	r2,a
   018B E4                  839 	clr	a
   018C 9B                  840 	subb	a,r3
   018D FB                  841 	mov	r3,a
   018E 74 01               842 	mov	a,#0x01
   0190 9C                  843 	subb	a,r4
   0191 FC                  844 	mov	r4,a
   0192 E4                  845 	clr	a
   0193 9D                  846 	subb	a,r5
   0194 FD                  847 	mov	r5,a
   0195 8A*06               848 	mov	_temp,r2
   0197 8B*07               849 	mov	(_temp + 1),r3
                            850 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:120: TH0 = temp / 256;
   0199 AA*07               851 	mov	r2,(_temp + 1)
   019B 8A 8C               852 	mov	_TH0,r2
                            853 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:121: TL0 = temp % 256;
   019D AA*06               854 	mov	r2,_temp
   019F 7B 00               855 	mov	r3,#0x00
   01A1 8A 8A               856 	mov	_TL0,r2
                            857 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:122: if (Action == 1) {
   01A3 74 01               858 	mov	a,#0x01
   01A5 B5*0E 04            859 	cjne	a,_Action,00109$
                            860 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:123: P2_7 = 1;
   01A8 D2 A7               861 	setb	_P2_7
   01AA 80 07               862 	sjmp	00110$
   01AC                     863 00109$:
                            864 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:124: } else if (Action == 2) {
   01AC 74 02               865 	mov	a,#0x02
   01AE B5*0E 02            866 	cjne	a,_Action,00110$
                            867 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:125: P2_6 = 1;
   01B1 D2 A6               868 	setb	_P2_6
   01B3                     869 00110$:
                            870 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:127: PWM_state = 1;
   01B3 75*0D 01            871 	mov	_PWM_state,#0x01
   01B6                     872 00114$:
   01B6 D0 D0               873 	pop	psw
   01B8 D0 E0               874 	pop	acc
   01BA 32                  875 	reti
                            876 ;	eliminated unneeded push/pop dpl
                            877 ;	eliminated unneeded push/pop dph
                            878 ;	eliminated unneeded push/pop b
                            879 ;------------------------------------------------------------
                            880 ;Allocation info for local variables in function 'time_count_add'
                            881 ;------------------------------------------------------------
                            882 ;------------------------------------------------------------
                            883 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:131: void time_count_add(void) __interrupt 3 {   // 10ms
                            884 ;	-----------------------------------------
                            885 ;	 function time_count_add
                            886 ;	-----------------------------------------
   01BB                     887 _time_count_add:
                    0002    888 	ar2 = 0x02
                    0003    889 	ar3 = 0x03
                    0004    890 	ar4 = 0x04
                    0005    891 	ar5 = 0x05
                    0006    892 	ar6 = 0x06
                    0007    893 	ar7 = 0x07
                    0000    894 	ar0 = 0x00
                    0001    895 	ar1 = 0x01
   01BB C0 E0               896 	push	acc
   01BD C0 D0               897 	push	psw
   01BF 75 D0 00            898 	mov	psw,#0x00
                            899 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:132: TH1 = (65536 - 10000) / 256;
   01C2 75 8D D8            900 	mov	_TH1,#0xD8
                            901 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:133: TL1 = (65536 - 10000) % 256; 
   01C5 75 8B F0            902 	mov	_TL1,#0xF0
                            903 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:134: time_count++;
   01C8 05*08               904 	inc	_time_count
   01CA E4                  905 	clr	a
   01CB B5*08 02            906 	cjne	a,_time_count,00115$
   01CE 05*09               907 	inc	(_time_count + 1)
   01D0                     908 00115$:
                            909 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:135: if (time_count == 100) {
   01D0 74 64               910 	mov	a,#0x64
   01D2 B5*08 06            911 	cjne	a,_time_count,00116$
   01D5 E4                  912 	clr	a
   01D6 B5*09 02            913 	cjne	a,(_time_count + 1),00116$
   01D9 80 02               914 	sjmp	00117$
   01DB                     915 00116$:
   01DB 80 23               916 	sjmp	00109$
   01DD                     917 00117$:
                            918 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:136: time_count = 0;
   01DD E4                  919 	clr	a
   01DE F5*08               920 	mov	_time_count,a
   01E0 F5*09               921 	mov	(_time_count + 1),a
                            922 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:137: if (++T_sec == 60) {
   01E2 05*0C               923 	inc	_T_sec
   01E4 74 3C               924 	mov	a,#0x3C
   01E6 B5*0C 17            925 	cjne	a,_T_sec,00109$
                            926 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:138: T_sec = 0;
   01E9 75*0C 00            927 	mov	_T_sec,#0x00
                            928 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:139: if (++T_min == 60) {
   01EC 05*0B               929 	inc	_T_min
   01EE 74 3C               930 	mov	a,#0x3C
   01F0 B5*0B 0D            931 	cjne	a,_T_min,00109$
                            932 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:140: T_min = 0;
   01F3 75*0B 00            933 	mov	_T_min,#0x00
                            934 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:141: if (++T_hour == 24) {
   01F6 05*0A               935 	inc	_T_hour
   01F8 74 18               936 	mov	a,#0x18
   01FA B5*0A 03            937 	cjne	a,_T_hour,00109$
                            938 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:142: T_hour = 0;
   01FD 75*0A 00            939 	mov	_T_hour,#0x00
   0200                     940 00109$:
   0200 D0 D0               941 	pop	psw
   0202 D0 E0               942 	pop	acc
   0204 32                  943 	reti
                            944 ;	eliminated unneeded push/pop dpl
                            945 ;	eliminated unneeded push/pop dph
                            946 ;	eliminated unneeded push/pop b
                            947 ;------------------------------------------------------------
                            948 ;Allocation info for local variables in function 'server_action'
                            949 ;------------------------------------------------------------
                            950 ;act                       Allocated to registers r2 r3 
                            951 ;------------------------------------------------------------
                            952 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:151: void server_action(int act) {
                            953 ;	-----------------------------------------
                            954 ;	 function server_action
                            955 ;	-----------------------------------------
   0205                     956 _server_action:
   0205 AA 82               957 	mov	r2,dpl
   0207 AB 83               958 	mov	r3,dph
                            959 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:152: Action = act;
   0209 8A*0E               960 	mov	_Action,r2
                            961 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:153: if (act == 1) {
   020B BA 01 16            962 	cjne	r2,#0x01,00104$
   020E BB 00 13            963 	cjne	r3,#0x00,00104$
                            964 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:154: ton = 2100; //2.2ms 左轉
   0211 75*02 34            965 	mov	_ton,#0x34
   0214 75*03 08            966 	mov	(_ton + 1),#0x08
                            967 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:155: delay_ms(2000);
   0217 90 07 D0            968 	mov	dptr,#0x07D0
   021A 12s00rBC            969 	lcall	_delay_ms
                            970 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:156: ton = 1000;
   021D 75*02 E8            971 	mov	_ton,#0xE8
   0220 75*03 03            972 	mov	(_ton + 1),#0x03
   0223 22                  973 	ret
   0224                     974 00104$:
                            975 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:157: } else if (act == 2) {
   0224 BA 02 15            976 	cjne	r2,#0x02,00106$
   0227 BB 00 12            977 	cjne	r3,#0x00,00106$
                            978 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:158: ton = 1000;
   022A 75*02 E8            979 	mov	_ton,#0xE8
   022D 75*03 03            980 	mov	(_ton + 1),#0x03
                            981 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:159: delay_ms(2000);
   0230 90 07 D0            982 	mov	dptr,#0x07D0
   0233 12s00rBC            983 	lcall	_delay_ms
                            984 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:160: ton = 2100;
   0236 75*02 34            985 	mov	_ton,#0x34
   0239 75*03 08            986 	mov	(_ton + 1),#0x08
   023C                     987 00106$:
   023C 22                  988 	ret
                            989 ;------------------------------------------------------------
                            990 ;Allocation info for local variables in function 'server_initial'
                            991 ;------------------------------------------------------------
                            992 ;------------------------------------------------------------
                            993 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:164: void server_initial(void) {
                            994 ;	-----------------------------------------
                            995 ;	 function server_initial
                            996 ;	-----------------------------------------
   023D                     997 _server_initial:
                            998 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:165: server_action(1);
   023D 90 00 01            999 	mov	dptr,#0x0001
   0240 12s02r05           1000 	lcall	_server_action
                           1001 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:166: delay_ms(2000);
   0243 90 07 D0           1002 	mov	dptr,#0x07D0
   0246 12s00rBC           1003 	lcall	_delay_ms
                           1004 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:167: server_action(2);
   0249 90 00 02           1005 	mov	dptr,#0x0002
   024C 02s02r05           1006 	ljmp	_server_action
                           1007 ;------------------------------------------------------------
                           1008 ;Allocation info for local variables in function 'finish_setup'
                           1009 ;------------------------------------------------------------
                           1010 ;------------------------------------------------------------
                           1011 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:170: void finish_setup(void) {
                           1012 ;	-----------------------------------------
                           1013 ;	 function finish_setup
                           1014 ;	-----------------------------------------
   024F                    1015 _finish_setup:
                           1016 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:171: P1 = 0xff;
   024F 75 90 FF           1017 	mov	_P1,#0xFF
                           1018 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:172: for (i = 0; i < 10; i++) {
   0252 75*12 00           1019 	mov	_i,#0x00
   0255                    1020 00101$:
   0255 C3                 1021 	clr	c
   0256 E5*12              1022 	mov	a,_i
   0258 64 80              1023 	xrl	a,#0x80
   025A 94 8A              1024 	subb	a,#0x8a
   025C 50 0F              1025 	jnc	00104$
                           1026 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:173: P1 = ~P1;
   025E E5 90              1027 	mov	a,_P1
   0260 F4                 1028 	cpl	a
   0261 F5 90              1029 	mov	_P1,a
                           1030 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:174: delay_ms(300);
   0263 90 01 2C           1031 	mov	dptr,#0x012C
   0266 12s00rBC           1032 	lcall	_delay_ms
                           1033 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:172: for (i = 0; i < 10; i++) {
   0269 05*12              1034 	inc	_i
   026B 80 E8              1035 	sjmp	00101$
   026D                    1036 00104$:
                           1037 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:176: P1 = 0xff;
   026D 75 90 FF           1038 	mov	_P1,#0xFF
   0270 22                 1039 	ret
                           1040 ;------------------------------------------------------------
                           1041 ;Allocation info for local variables in function 'main'
                           1042 ;------------------------------------------------------------
                           1043 ;prebtn0                   Allocated to registers r2 
                           1044 ;prebtn1                   Allocated to registers r3 
                           1045 ;prebtn2                   Allocated to registers r4 
                           1046 ;prebtn3                   Allocated to registers r5 
                           1047 ;mode2_change_place        Allocated to stack - offset 1
                           1048 ;open_close_time           Allocated to stack - offset 2
                           1049 ;mode                      Allocated to stack - offset 8
                           1050 ;BT_data                   Allocated to stack - offset 9
                           1051 ;sloc0                     Allocated to stack - offset 10
                           1052 ;sloc1                     Allocated to stack - offset 11
                           1053 ;sloc2                     Allocated to stack - offset 12
                           1054 ;sloc3                     Allocated to stack - offset 17
                           1055 ;------------------------------------------------------------
                           1056 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:179: void main(void) {
                           1057 ;	-----------------------------------------
                           1058 ;	 function main
                           1059 ;	-----------------------------------------
   0271                    1060 _main:
   0271 C0*00              1061 	push	_bp
   0273 E5 81              1062 	mov	a,sp
   0275 F5*00              1063 	mov	_bp,a
   0277 24 0C              1064 	add	a,#0x0c
   0279 F5 81              1065 	mov	sp,a
                           1066 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:180: char prebtn0 = 0, prebtn1 = 0, prebtn2 = 0, prebtn3 = 0;
   027B 7A 00              1067 	mov	r2,#0x00
   027D 7B 00              1068 	mov	r3,#0x00
   027F 7C 00              1069 	mov	r4,#0x00
   0281 7D 00              1070 	mov	r5,#0x00
                           1071 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:181: char mode2_change_place = 0;
   0283 A8*00              1072 	mov	r0,_bp
   0285 08                 1073 	inc	r0
   0286 76 00              1074 	mov	@r0,#0x00
                           1075 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:182: char open_close_time[6] = {0, 0, 0, 0, 0, 0}; //open: Hour, Minute, Second. close: Hour, Minute, Second.
   0288 E5*00              1076 	mov	a,_bp
   028A 24 02              1077 	add	a,#0x02
   028C F8                 1078 	mov	r0,a
   028D 76 00              1079 	mov	@r0,#0x00
   028F E8                 1080 	mov	a,r0
   0290 04                 1081 	inc	a
   0291 F9                 1082 	mov	r1,a
   0292 77 00              1083 	mov	@r1,#0x00
   0294 74 02              1084 	mov	a,#0x02
   0296 28                 1085 	add	a,r0
   0297 FF                 1086 	mov	r7,a
   0298 C0 00              1087 	push	ar0
   029A A8 07              1088 	mov	r0,ar7
   029C 76 00              1089 	mov	@r0,#0x00
   029E D0 00              1090 	pop	ar0
   02A0 C0 01              1091 	push	ar1
   02A2 E5*00              1092 	mov	a,_bp
   02A4 24 0A              1093 	add	a,#0x0a
   02A6 F9                 1094 	mov	r1,a
   02A7 74 03              1095 	mov	a,#0x03
   02A9 28                 1096 	add	a,r0
   02AA F7                 1097 	mov	@r1,a
   02AB D0 01              1098 	pop	ar1
   02AD C0 00              1099 	push	ar0
   02AF E5*00              1100 	mov	a,_bp
   02B1 24 0A              1101 	add	a,#0x0a
   02B3 F8                 1102 	mov	r0,a
   02B4 86 00              1103 	mov	ar0,@r0
   02B6 76 00              1104 	mov	@r0,#0x00
   02B8 D0 00              1105 	pop	ar0
   02BA C0 01              1106 	push	ar1
   02BC E5*00              1107 	mov	a,_bp
   02BE 24 0B              1108 	add	a,#0x0b
   02C0 F9                 1109 	mov	r1,a
   02C1 74 04              1110 	mov	a,#0x04
   02C3 28                 1111 	add	a,r0
   02C4 F7                 1112 	mov	@r1,a
   02C5 D0 01              1113 	pop	ar1
   02C7 C0 00              1114 	push	ar0
   02C9 E5*00              1115 	mov	a,_bp
   02CB 24 0B              1116 	add	a,#0x0b
   02CD F8                 1117 	mov	r0,a
   02CE 86 00              1118 	mov	ar0,@r0
   02D0 76 00              1119 	mov	@r0,#0x00
   02D2 D0 00              1120 	pop	ar0
   02D4 C0 01              1121 	push	ar1
   02D6 E5*00              1122 	mov	a,_bp
   02D8 24 0C              1123 	add	a,#0x0c
   02DA F9                 1124 	mov	r1,a
   02DB 74 05              1125 	mov	a,#0x05
   02DD 28                 1126 	add	a,r0
   02DE F7                 1127 	mov	@r1,a
   02DF D0 01              1128 	pop	ar1
   02E1 C0 00              1129 	push	ar0
   02E3 E5*00              1130 	mov	a,_bp
   02E5 24 0C              1131 	add	a,#0x0c
   02E7 F8                 1132 	mov	r0,a
   02E8 86 00              1133 	mov	ar0,@r0
   02EA 76 00              1134 	mov	@r0,#0x00
                           1135 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:183: char mode = 1;
   02EC E5*00              1136 	mov	a,_bp
   02EE 24 08              1137 	add	a,#0x08
   02F0 F8                 1138 	mov	r0,a
   02F1 76 01              1139 	mov	@r0,#0x01
   02F3 D0 00              1140 	pop	ar0
                           1141 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:185: INT0 = 1; INT1 = 1; P2_0 = 1; P2_1 = 1;
   02F5 D2 B2              1142 	setb	_INT0
   02F7 D2 B3              1143 	setb	_INT1
   02F9 D2 A0              1144 	setb	_P2_0
   02FB D2 A1              1145 	setb	_P2_1
                           1146 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:186: ton = 1500;
   02FD 75*02 DC           1147 	mov	_ton,#0xDC
   0300 75*03 05           1148 	mov	(_ton + 1),#0x05
                           1149 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:187: toff = 30000 - 1500;
   0303 75*04 54           1150 	mov	_toff,#0x54
   0306 75*05 6F           1151 	mov	(_toff + 1),#0x6F
                           1152 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:188: SSD_Initial();
   0309 C0 02              1153 	push	ar2
   030B C0 03              1154 	push	ar3
   030D C0 04              1155 	push	ar4
   030F C0 05              1156 	push	ar5
   0311 C0 07              1157 	push	ar7
   0313 C0 00              1158 	push	ar0
   0315 C0 01              1159 	push	ar1
   0317 12s00r66           1160 	lcall	_SSD_Initial
                           1161 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:189: time_initial();
   031A 12s01r09           1162 	lcall	_time_initial
                           1163 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:190: UART_Init();
   031D 12s00rD7           1164 	lcall	_UART_Init
                           1165 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:191: server_initial();
   0320 12s02r3D           1166 	lcall	_server_initial
                           1167 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:192: finish_setup();
   0323 12s02r4F           1168 	lcall	_finish_setup
   0326 D0 01              1169 	pop	ar1
   0328 D0 00              1170 	pop	ar0
   032A D0 07              1171 	pop	ar7
   032C D0 05              1172 	pop	ar5
   032E D0 04              1173 	pop	ar4
   0330 D0 03              1174 	pop	ar3
   0332 D0 02              1175 	pop	ar2
                           1176 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:194: while (1) {
   0334                    1177 00273$:
                           1178 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:195: if (BT_data == '1') {
   0334 C0 00              1179 	push	ar0
   0336 E5*00              1180 	mov	a,_bp
   0338 24 09              1181 	add	a,#0x09
   033A F8                 1182 	mov	r0,a
   033B B6 31 02           1183 	cjne	@r0,#0x31,00357$
   033E 80 04              1184 	sjmp	00358$
   0340                    1185 00357$:
   0340 D0 00              1186 	pop	ar0
   0342 80 31              1187 	sjmp	00104$
   0344                    1188 00358$:
   0344 D0 00              1189 	pop	ar0
                           1190 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:196: server_action(1);
   0346 90 00 01           1191 	mov	dptr,#0x0001
   0349 C0 02              1192 	push	ar2
   034B C0 03              1193 	push	ar3
   034D C0 04              1194 	push	ar4
   034F C0 05              1195 	push	ar5
   0351 C0 07              1196 	push	ar7
   0353 C0 00              1197 	push	ar0
   0355 C0 01              1198 	push	ar1
   0357 12s02r05           1199 	lcall	_server_action
   035A D0 01              1200 	pop	ar1
   035C D0 00              1201 	pop	ar0
   035E D0 07              1202 	pop	ar7
   0360 D0 05              1203 	pop	ar5
   0362 D0 04              1204 	pop	ar4
   0364 D0 03              1205 	pop	ar3
   0366 D0 02              1206 	pop	ar2
                           1207 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:197: BT_data = ' ';
   0368 C0 00              1208 	push	ar0
   036A E5*00              1209 	mov	a,_bp
   036C 24 09              1210 	add	a,#0x09
   036E F8                 1211 	mov	r0,a
   036F 76 20              1212 	mov	@r0,#0x20
   0371 D0 00              1213 	pop	ar0
   0373 80 3F              1214 	sjmp	00105$
   0375                    1215 00104$:
                           1216 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:198: } else if (BT_data == '2') {
   0375 C0 00              1217 	push	ar0
   0377 E5*00              1218 	mov	a,_bp
   0379 24 09              1219 	add	a,#0x09
   037B F8                 1220 	mov	r0,a
   037C B6 32 02           1221 	cjne	@r0,#0x32,00359$
   037F 80 04              1222 	sjmp	00360$
   0381                    1223 00359$:
   0381 D0 00              1224 	pop	ar0
   0383 80 2F              1225 	sjmp	00105$
   0385                    1226 00360$:
   0385 D0 00              1227 	pop	ar0
                           1228 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:199: server_action(2);
   0387 90 00 02           1229 	mov	dptr,#0x0002
   038A C0 02              1230 	push	ar2
   038C C0 03              1231 	push	ar3
   038E C0 04              1232 	push	ar4
   0390 C0 05              1233 	push	ar5
   0392 C0 07              1234 	push	ar7
   0394 C0 00              1235 	push	ar0
   0396 C0 01              1236 	push	ar1
   0398 12s02r05           1237 	lcall	_server_action
   039B D0 01              1238 	pop	ar1
   039D D0 00              1239 	pop	ar0
   039F D0 07              1240 	pop	ar7
   03A1 D0 05              1241 	pop	ar5
   03A3 D0 04              1242 	pop	ar4
   03A5 D0 03              1243 	pop	ar3
   03A7 D0 02              1244 	pop	ar2
                           1245 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:200: BT_data = ' ';
   03A9 C0 00              1246 	push	ar0
   03AB E5*00              1247 	mov	a,_bp
   03AD 24 09              1248 	add	a,#0x09
   03AF F8                 1249 	mov	r0,a
   03B0 76 20              1250 	mov	@r0,#0x20
   03B2 D0 00              1251 	pop	ar0
   03B4                    1252 00105$:
                           1253 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:203: if (INT0 == 0 && prebtn0 == 1) {
   03B4 30 B2 03           1254 	jnb	_INT0,00361$
   03B7 02s04rF7           1255 	ljmp	00138$
   03BA                    1256 00361$:
   03BA BA 01 02           1257 	cjne	r2,#0x01,00362$
   03BD 80 03              1258 	sjmp	00363$
   03BF                    1259 00362$:
   03BF 02s04rF7           1260 	ljmp	00138$
   03C2                    1261 00363$:
                           1262 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:204: delay_ms(10);
   03C2 90 00 0A           1263 	mov	dptr,#0x000A
   03C5 C0 03              1264 	push	ar3
   03C7 C0 04              1265 	push	ar4
   03C9 C0 05              1266 	push	ar5
   03CB C0 07              1267 	push	ar7
   03CD C0 00              1268 	push	ar0
   03CF C0 01              1269 	push	ar1
   03D1 12s00rBC           1270 	lcall	_delay_ms
   03D4 D0 01              1271 	pop	ar1
   03D6 D0 00              1272 	pop	ar0
   03D8 D0 07              1273 	pop	ar7
   03DA D0 05              1274 	pop	ar5
   03DC D0 04              1275 	pop	ar4
   03DE D0 03              1276 	pop	ar3
                           1277 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:205: if (INT0 == 0) {
   03E0 30 B2 03           1278 	jnb	_INT0,00364$
   03E3 02s04rF7           1279 	ljmp	00138$
   03E6                    1280 00364$:
                           1281 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:206: if (mode == 1) { // 開燈
   03E6 C0 00              1282 	push	ar0
   03E8 E5*00              1283 	mov	a,_bp
   03EA 24 08              1284 	add	a,#0x08
   03EC F8                 1285 	mov	r0,a
   03ED B6 01 02           1286 	cjne	@r0,#0x01,00365$
   03F0 80 04              1287 	sjmp	00366$
   03F2                    1288 00365$:
   03F2 D0 00              1289 	pop	ar0
   03F4 80 23              1290 	sjmp	00133$
   03F6                    1291 00366$:
   03F6 D0 00              1292 	pop	ar0
                           1293 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:207: server_action(1);
   03F8 90 00 01           1294 	mov	dptr,#0x0001
   03FB C0 03              1295 	push	ar3
   03FD C0 04              1296 	push	ar4
   03FF C0 05              1297 	push	ar5
   0401 C0 07              1298 	push	ar7
   0403 C0 00              1299 	push	ar0
   0405 C0 01              1300 	push	ar1
   0407 12s02r05           1301 	lcall	_server_action
   040A D0 01              1302 	pop	ar1
   040C D0 00              1303 	pop	ar0
   040E D0 07              1304 	pop	ar7
   0410 D0 05              1305 	pop	ar5
   0412 D0 04              1306 	pop	ar4
   0414 D0 03              1307 	pop	ar3
   0416 02s04rF7           1308 	ljmp	00138$
   0419                    1309 00133$:
                           1310 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:208: } else if (mode == 2) {
   0419 C0 00              1311 	push	ar0
   041B E5*00              1312 	mov	a,_bp
   041D 24 08              1313 	add	a,#0x08
   041F F8                 1314 	mov	r0,a
   0420 B6 02 02           1315 	cjne	@r0,#0x02,00367$
   0423 80 04              1316 	sjmp	00368$
   0425                    1317 00367$:
   0425 D0 00              1318 	pop	ar0
   0427 80 6E              1319 	sjmp	00130$
   0429                    1320 00368$:
                           1321 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:209: switch(mode2_change_place) {
   0429 A8*00              1322 	mov	r0,_bp
   042B 08                 1323 	inc	r0
   042C B6 00 04           1324 	cjne	@r0,#0x00,00369$
   042F D0 00              1325 	pop	ar0
   0431 80 0E              1326 	sjmp	00107$
   0433                    1327 00369$:
   0433 A8*00              1328 	mov	r0,_bp
   0435 08                 1329 	inc	r0
   0436 B6 03 02           1330 	cjne	@r0,#0x03,00370$
   0439 80 04              1331 	sjmp	00371$
   043B                    1332 00370$:
   043B D0 00              1333 	pop	ar0
   043D 80 2E              1334 	sjmp	00110$
   043F                    1335 00371$:
   043F D0 00              1336 	pop	ar0
                           1337 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:211: case 3:
   0441                    1338 00107$:
                           1339 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:212: if (++open_close_time[mode2_change_place] == 24) {
   0441 C0 05              1340 	push	ar5
   0443 C0 01              1341 	push	ar1
   0445 A9*00              1342 	mov	r1,_bp
   0447 09                 1343 	inc	r1
   0448 E7                 1344 	mov	a,@r1
   0449 28                 1345 	add	a,r0
   044A FA                 1346 	mov	r2,a
   044B D0 01              1347 	pop	ar1
   044D C0 00              1348 	push	ar0
   044F A8 02              1349 	mov	r0,ar2
   0451 06                 1350 	inc	@r0
   0452 86 05              1351 	mov	ar5,@r0
   0454 D0 00              1352 	pop	ar0
   0456 BD 18 02           1353 	cjne	r5,#0x18,00372$
   0459 80 05              1354 	sjmp	00373$
   045B                    1355 00372$:
   045B D0 05              1356 	pop	ar5
   045D 02s04rF7           1357 	ljmp	00138$
   0460                    1358 00373$:
   0460 D0 05              1359 	pop	ar5
                           1360 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:213: open_close_time[mode2_change_place] = 0;
   0462 C0 00              1361 	push	ar0
   0464 A8 02              1362 	mov	r0,ar2
   0466 76 00              1363 	mov	@r0,#0x00
   0468 D0 00              1364 	pop	ar0
                           1365 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:215: break;
   046A 02s04rF7           1366 	ljmp	00138$
                           1367 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:216: default:
   046D                    1368 00110$:
                           1369 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:217: if (++open_close_time[mode2_change_place] == 60) {
   046D C0 05              1370 	push	ar5
   046F C0 01              1371 	push	ar1
   0471 A9*00              1372 	mov	r1,_bp
   0473 09                 1373 	inc	r1
   0474 E7                 1374 	mov	a,@r1
   0475 28                 1375 	add	a,r0
   0476 FA                 1376 	mov	r2,a
   0477 D0 01              1377 	pop	ar1
   0479 C0 00              1378 	push	ar0
   047B A8 02              1379 	mov	r0,ar2
   047D 06                 1380 	inc	@r0
   047E 86 05              1381 	mov	ar5,@r0
   0480 D0 00              1382 	pop	ar0
   0482 BD 3C 02           1383 	cjne	r5,#0x3C,00374$
   0485 80 04              1384 	sjmp	00375$
   0487                    1385 00374$:
   0487 D0 05              1386 	pop	ar5
   0489 80 6C              1387 	sjmp	00138$
   048B                    1388 00375$:
   048B D0 05              1389 	pop	ar5
                           1390 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:218: open_close_time[mode2_change_place] = 0;
   048D C0 00              1391 	push	ar0
   048F A8 02              1392 	mov	r0,ar2
   0491 76 00              1393 	mov	@r0,#0x00
   0493 D0 00              1394 	pop	ar0
                           1395 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:220: }
   0495 80 60              1396 	sjmp	00138$
   0497                    1397 00130$:
                           1398 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:221: } else if (mode == 3) {
   0497 C0 00              1399 	push	ar0
   0499 E5*00              1400 	mov	a,_bp
   049B 24 08              1401 	add	a,#0x08
   049D F8                 1402 	mov	r0,a
   049E B6 03 04           1403 	cjne	@r0,#0x03,00376$
   04A1 D0 00              1404 	pop	ar0
   04A3 80 52              1405 	sjmp	00138$
   04A5                    1406 00376$:
                           1407 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:223: } else if (mode == 4) {
   04A5 E5*00              1408 	mov	a,_bp
   04A7 24 08              1409 	add	a,#0x08
   04A9 F8                 1410 	mov	r0,a
   04AA B6 04 02           1411 	cjne	@r0,#0x04,00377$
   04AD 80 04              1412 	sjmp	00378$
   04AF                    1413 00377$:
   04AF D0 00              1414 	pop	ar0
   04B1 80 44              1415 	sjmp	00138$
   04B3                    1416 00378$:
   04B3 D0 00              1417 	pop	ar0
                           1418 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:224: switch (change_time) {
   04B5 E4                 1419 	clr	a
   04B6 B5*0F 02           1420 	cjne	a,_change_time,00379$
   04B9 80 0E              1421 	sjmp	00114$
   04BB                    1422 00379$:
   04BB 74 01              1423 	mov	a,#0x01
   04BD B5*0F 02           1424 	cjne	a,_change_time,00380$
   04C0 80 17              1425 	sjmp	00117$
   04C2                    1426 00380$:
   04C2 74 02              1427 	mov	a,#0x02
                           1428 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:225: case 0:
   04C4 B5*0F 30           1429 	cjne	a,_change_time,00138$
   04C7 80 20              1430 	sjmp	00120$
   04C9                    1431 00114$:
                           1432 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:226: if (++T_hour >= 24) {
   04C9 05*0A              1433 	inc	_T_hour
   04CB C3                 1434 	clr	c
   04CC E5*0A              1435 	mov	a,_T_hour
   04CE 64 80              1436 	xrl	a,#0x80
   04D0 94 98              1437 	subb	a,#0x98
   04D2 40 23              1438 	jc	00138$
                           1439 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:227: T_hour = 0;
   04D4 75*0A 00           1440 	mov	_T_hour,#0x00
                           1441 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:229: break;
                           1442 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:230: case 1:
   04D7 80 1E              1443 	sjmp	00138$
   04D9                    1444 00117$:
                           1445 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:231: if (++T_min >= 60) {
   04D9 05*0B              1446 	inc	_T_min
   04DB C3                 1447 	clr	c
   04DC E5*0B              1448 	mov	a,_T_min
   04DE 64 80              1449 	xrl	a,#0x80
   04E0 94 BC              1450 	subb	a,#0xbc
   04E2 40 13              1451 	jc	00138$
                           1452 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:232: T_min = 0;
   04E4 75*0B 00           1453 	mov	_T_min,#0x00
                           1454 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:234: break;
                           1455 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:235: case 2:
   04E7 80 0E              1456 	sjmp	00138$
   04E9                    1457 00120$:
                           1458 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:236: if (++T_sec >= 60) {
   04E9 05*0C              1459 	inc	_T_sec
   04EB C3                 1460 	clr	c
   04EC E5*0C              1461 	mov	a,_T_sec
   04EE 64 80              1462 	xrl	a,#0x80
   04F0 94 BC              1463 	subb	a,#0xbc
   04F2 40 03              1464 	jc	00138$
                           1465 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:237: T_sec = 0;
   04F4 75*0C 00           1466 	mov	_T_sec,#0x00
                           1467 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:239: }
   04F7                    1468 00138$:
                           1469 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:243: if (INT1 == 0 && prebtn1 == 1) {
   04F7 30 B3 03           1470 	jnb	_INT1,00385$
   04FA 02s06r27           1471 	ljmp	00176$
   04FD                    1472 00385$:
   04FD BB 01 02           1473 	cjne	r3,#0x01,00386$
   0500 80 03              1474 	sjmp	00387$
   0502                    1475 00386$:
   0502 02s06r27           1476 	ljmp	00176$
   0505                    1477 00387$:
                           1478 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:244: delay_ms(10);
   0505 90 00 0A           1479 	mov	dptr,#0x000A
   0508 C0 04              1480 	push	ar4
   050A C0 05              1481 	push	ar5
   050C C0 07              1482 	push	ar7
   050E C0 00              1483 	push	ar0
   0510 C0 01              1484 	push	ar1
   0512 12s00rBC           1485 	lcall	_delay_ms
   0515 D0 01              1486 	pop	ar1
   0517 D0 00              1487 	pop	ar0
   0519 D0 07              1488 	pop	ar7
   051B D0 05              1489 	pop	ar5
   051D D0 04              1490 	pop	ar4
                           1491 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:245: if (INT1 == 0) {
   051F 30 B3 03           1492 	jnb	_INT1,00388$
   0522 02s06r27           1493 	ljmp	00176$
   0525                    1494 00388$:
                           1495 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:246: if (mode == 1) {
   0525 C0 00              1496 	push	ar0
   0527 E5*00              1497 	mov	a,_bp
   0529 24 08              1498 	add	a,#0x08
   052B F8                 1499 	mov	r0,a
   052C B6 01 02           1500 	cjne	@r0,#0x01,00389$
   052F 80 04              1501 	sjmp	00390$
   0531                    1502 00389$:
   0531 D0 00              1503 	pop	ar0
   0533 80 1F              1504 	sjmp	00171$
   0535                    1505 00390$:
   0535 D0 00              1506 	pop	ar0
                           1507 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:247: server_action(2);
   0537 90 00 02           1508 	mov	dptr,#0x0002
   053A C0 04              1509 	push	ar4
   053C C0 05              1510 	push	ar5
   053E C0 07              1511 	push	ar7
   0540 C0 00              1512 	push	ar0
   0542 C0 01              1513 	push	ar1
   0544 12s02r05           1514 	lcall	_server_action
   0547 D0 01              1515 	pop	ar1
   0549 D0 00              1516 	pop	ar0
   054B D0 07              1517 	pop	ar7
   054D D0 05              1518 	pop	ar5
   054F D0 04              1519 	pop	ar4
   0551 02s06r27           1520 	ljmp	00176$
   0554                    1521 00171$:
                           1522 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:248: } else if (mode == 2) {
   0554 C0 00              1523 	push	ar0
   0556 E5*00              1524 	mov	a,_bp
   0558 24 08              1525 	add	a,#0x08
   055A F8                 1526 	mov	r0,a
   055B B6 02 02           1527 	cjne	@r0,#0x02,00391$
   055E 80 04              1528 	sjmp	00392$
   0560                    1529 00391$:
   0560 D0 00              1530 	pop	ar0
   0562 80 75              1531 	sjmp	00168$
   0564                    1532 00392$:
                           1533 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:249: switch(mode2_change_place) {
   0564 A8*00              1534 	mov	r0,_bp
   0566 08                 1535 	inc	r0
   0567 B6 00 04           1536 	cjne	@r0,#0x00,00393$
   056A D0 00              1537 	pop	ar0
   056C 80 0E              1538 	sjmp	00141$
   056E                    1539 00393$:
   056E A8*00              1540 	mov	r0,_bp
   0570 08                 1541 	inc	r0
   0571 B6 03 02           1542 	cjne	@r0,#0x03,00394$
   0574 80 04              1543 	sjmp	00395$
   0576                    1544 00394$:
   0576 D0 00              1545 	pop	ar0
   0578 80 32              1546 	sjmp	00144$
   057A                    1547 00395$:
   057A D0 00              1548 	pop	ar0
                           1549 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:251: case 3:
   057C                    1550 00141$:
                           1551 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:252: if (--open_close_time[mode2_change_place] <= 0) {
   057C C0 05              1552 	push	ar5
   057E C0 01              1553 	push	ar1
   0580 A9*00              1554 	mov	r1,_bp
   0582 09                 1555 	inc	r1
   0583 E7                 1556 	mov	a,@r1
   0584 28                 1557 	add	a,r0
   0585 FA                 1558 	mov	r2,a
   0586 D0 01              1559 	pop	ar1
   0588 C0 00              1560 	push	ar0
   058A A8 02              1561 	mov	r0,ar2
   058C 16                 1562 	dec	@r0
   058D 86 05              1563 	mov	ar5,@r0
   058F D0 00              1564 	pop	ar0
   0591 C3                 1565 	clr	c
   0592 74 80              1566 	mov	a,#(0x00 ^ 0x80)
   0594 8D F0              1567 	mov	b,r5
   0596 63 F0 80           1568 	xrl	b,#0x80
   0599 95 F0              1569 	subb	a,b
   059B D0 05              1570 	pop	ar5
   059D 50 03              1571 	jnc	00396$
   059F 02s06r27           1572 	ljmp	00176$
   05A2                    1573 00396$:
                           1574 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:253: open_close_time[mode2_change_place] = 23;
   05A2 C0 00              1575 	push	ar0
   05A4 A8 02              1576 	mov	r0,ar2
   05A6 76 17              1577 	mov	@r0,#0x17
   05A8 D0 00              1578 	pop	ar0
                           1579 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:255: break;
                           1580 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:256: default:
   05AA 80 7B              1581 	sjmp	00176$
   05AC                    1582 00144$:
                           1583 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:257: if (--open_close_time[mode2_change_place] <= 0) {
   05AC C0 05              1584 	push	ar5
   05AE C0 01              1585 	push	ar1
   05B0 A9*00              1586 	mov	r1,_bp
   05B2 09                 1587 	inc	r1
   05B3 E7                 1588 	mov	a,@r1
   05B4 28                 1589 	add	a,r0
   05B5 FA                 1590 	mov	r2,a
   05B6 D0 01              1591 	pop	ar1
   05B8 C0 00              1592 	push	ar0
   05BA A8 02              1593 	mov	r0,ar2
   05BC 16                 1594 	dec	@r0
   05BD 86 05              1595 	mov	ar5,@r0
   05BF D0 00              1596 	pop	ar0
   05C1 C3                 1597 	clr	c
   05C2 74 80              1598 	mov	a,#(0x00 ^ 0x80)
   05C4 8D F0              1599 	mov	b,r5
   05C6 63 F0 80           1600 	xrl	b,#0x80
   05C9 95 F0              1601 	subb	a,b
   05CB D0 05              1602 	pop	ar5
   05CD 40 58              1603 	jc	00176$
                           1604 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:258: open_close_time[mode2_change_place] = 59;
   05CF C0 00              1605 	push	ar0
   05D1 A8 02              1606 	mov	r0,ar2
   05D3 76 3B              1607 	mov	@r0,#0x3B
   05D5 D0 00              1608 	pop	ar0
                           1609 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:260: }
   05D7 80 4E              1610 	sjmp	00176$
   05D9                    1611 00168$:
                           1612 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:261: } else if (mode == 3) {
   05D9 C0 00              1613 	push	ar0
   05DB E5*00              1614 	mov	a,_bp
   05DD 24 08              1615 	add	a,#0x08
   05DF F8                 1616 	mov	r0,a
   05E0 B6 03 04           1617 	cjne	@r0,#0x03,00398$
   05E3 D0 00              1618 	pop	ar0
   05E5 80 40              1619 	sjmp	00176$
   05E7                    1620 00398$:
                           1621 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:263: } else if (mode == 4) {
   05E7 E5*00              1622 	mov	a,_bp
   05E9 24 08              1623 	add	a,#0x08
   05EB F8                 1624 	mov	r0,a
   05EC B6 04 02           1625 	cjne	@r0,#0x04,00399$
   05EF 80 04              1626 	sjmp	00400$
   05F1                    1627 00399$:
   05F1 D0 00              1628 	pop	ar0
   05F3 80 32              1629 	sjmp	00176$
   05F5                    1630 00400$:
   05F5 D0 00              1631 	pop	ar0
                           1632 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:264: if (change_time == 0) {
   05F7 E5*0F              1633 	mov	a,_change_time
   05F9 70 0C              1634 	jnz	00160$
                           1635 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:265: if (--T_hour < 0) {
   05FB 15*0A              1636 	dec	_T_hour
   05FD E5*0A              1637 	mov	a,_T_hour
   05FF 30 E7 25           1638 	jnb	acc.7,00176$
                           1639 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:266: T_hour = 23;
   0602 75*0A 17           1640 	mov	_T_hour,#0x17
   0605 80 20              1641 	sjmp	00176$
   0607                    1642 00160$:
                           1643 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:268: } else if (change_time == 1) {
   0607 74 01              1644 	mov	a,#0x01
   0609 B5*0F 0C           1645 	cjne	a,_change_time,00157$
                           1646 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:269: if (--T_min < 0) {
   060C 15*0B              1647 	dec	_T_min
   060E E5*0B              1648 	mov	a,_T_min
   0610 30 E7 14           1649 	jnb	acc.7,00176$
                           1650 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:270: T_min = 59;
   0613 75*0B 3B           1651 	mov	_T_min,#0x3B
   0616 80 0F              1652 	sjmp	00176$
   0618                    1653 00157$:
                           1654 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:272: } else if (change_time == 2) {
   0618 74 02              1655 	mov	a,#0x02
   061A B5*0F 0A           1656 	cjne	a,_change_time,00176$
                           1657 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:273: if (--T_sec < 0) {
   061D 15*0C              1658 	dec	_T_sec
   061F E5*0C              1659 	mov	a,_T_sec
   0621 30 E7 03           1660 	jnb	acc.7,00176$
                           1661 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:274: T_sec = 59;
   0624 75*0C 3B           1662 	mov	_T_sec,#0x3B
   0627                    1663 00176$:
                           1664 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:280: if (P2_0 == 0 && prebtn2 == 1) {
   0627 30 A0 03           1665 	jnb	_P2_0,00409$
   062A 02s06rB8           1666 	ljmp	00192$
   062D                    1667 00409$:
   062D BC 01 02           1668 	cjne	r4,#0x01,00410$
   0630 80 03              1669 	sjmp	00411$
   0632                    1670 00410$:
   0632 02s06rB8           1671 	ljmp	00192$
   0635                    1672 00411$:
                           1673 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:281: delay_ms(10);
   0635 90 00 0A           1674 	mov	dptr,#0x000A
   0638 C0 05              1675 	push	ar5
   063A C0 07              1676 	push	ar7
   063C C0 00              1677 	push	ar0
   063E C0 01              1678 	push	ar1
   0640 12s00rBC           1679 	lcall	_delay_ms
   0643 D0 01              1680 	pop	ar1
   0645 D0 00              1681 	pop	ar0
   0647 D0 07              1682 	pop	ar7
   0649 D0 05              1683 	pop	ar5
                           1684 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:282: if (P2_0 == 0) {
   064B 20 A0 6A           1685 	jb	_P2_0,00192$
                           1686 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:283: if (mode == 1) {
   064E C0 00              1687 	push	ar0
   0650 E5*00              1688 	mov	a,_bp
   0652 24 08              1689 	add	a,#0x08
   0654 F8                 1690 	mov	r0,a
   0655 B6 01 02           1691 	cjne	@r0,#0x01,00413$
   0658 80 04              1692 	sjmp	00414$
   065A                    1693 00413$:
   065A D0 00              1694 	pop	ar0
   065C 80 0B              1695 	sjmp	00187$
   065E                    1696 00414$:
                           1697 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:284: mode = 2;
   065E E5*00              1698 	mov	a,_bp
   0660 24 08              1699 	add	a,#0x08
   0662 F8                 1700 	mov	r0,a
   0663 76 02              1701 	mov	@r0,#0x02
   0665 D0 00              1702 	pop	ar0
   0667 80 4F              1703 	sjmp	00192$
   0669                    1704 00187$:
                           1705 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:285: } else if (mode == 2) {
   0669 C0 00              1706 	push	ar0
   066B E5*00              1707 	mov	a,_bp
   066D 24 08              1708 	add	a,#0x08
   066F F8                 1709 	mov	r0,a
   0670 B6 02 02           1710 	cjne	@r0,#0x02,00415$
   0673 80 04              1711 	sjmp	00416$
   0675                    1712 00415$:
   0675 D0 00              1713 	pop	ar0
   0677 80 0B              1714 	sjmp	00184$
   0679                    1715 00416$:
                           1716 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:286: mode = 3;
   0679 E5*00              1717 	mov	a,_bp
   067B 24 08              1718 	add	a,#0x08
   067D F8                 1719 	mov	r0,a
   067E 76 03              1720 	mov	@r0,#0x03
   0680 D0 00              1721 	pop	ar0
   0682 80 34              1722 	sjmp	00192$
   0684                    1723 00184$:
                           1724 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:287: } else if (mode == 3) {
   0684 C0 00              1725 	push	ar0
   0686 E5*00              1726 	mov	a,_bp
   0688 24 08              1727 	add	a,#0x08
   068A F8                 1728 	mov	r0,a
   068B B6 03 02           1729 	cjne	@r0,#0x03,00417$
   068E 80 04              1730 	sjmp	00418$
   0690                    1731 00417$:
   0690 D0 00              1732 	pop	ar0
   0692 80 0B              1733 	sjmp	00181$
   0694                    1734 00418$:
                           1735 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:288: mode = 4;
   0694 E5*00              1736 	mov	a,_bp
   0696 24 08              1737 	add	a,#0x08
   0698 F8                 1738 	mov	r0,a
   0699 76 04              1739 	mov	@r0,#0x04
   069B D0 00              1740 	pop	ar0
   069D 80 19              1741 	sjmp	00192$
   069F                    1742 00181$:
                           1743 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:289: } else if (mode == 4) {
   069F C0 00              1744 	push	ar0
   06A1 E5*00              1745 	mov	a,_bp
   06A3 24 08              1746 	add	a,#0x08
   06A5 F8                 1747 	mov	r0,a
   06A6 B6 04 02           1748 	cjne	@r0,#0x04,00419$
   06A9 80 04              1749 	sjmp	00420$
   06AB                    1750 00419$:
   06AB D0 00              1751 	pop	ar0
   06AD 80 09              1752 	sjmp	00192$
   06AF                    1753 00420$:
                           1754 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:290: mode = 1;
   06AF E5*00              1755 	mov	a,_bp
   06B1 24 08              1756 	add	a,#0x08
   06B3 F8                 1757 	mov	r0,a
   06B4 76 01              1758 	mov	@r0,#0x01
   06B6 D0 00              1759 	pop	ar0
   06B8                    1760 00192$:
                           1761 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:294: if (P2_1 == 0 && prebtn3 == 1) {
   06B8 20 A1 75           1762 	jb	_P2_1,00212$
   06BB BD 01 72           1763 	cjne	r5,#0x01,00212$
                           1764 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:295: delay_ms(10);
   06BE 90 00 0A           1765 	mov	dptr,#0x000A
   06C1 C0 07              1766 	push	ar7
   06C3 C0 00              1767 	push	ar0
   06C5 C0 01              1768 	push	ar1
   06C7 12s00rBC           1769 	lcall	_delay_ms
   06CA D0 01              1770 	pop	ar1
   06CC D0 00              1771 	pop	ar0
   06CE D0 07              1772 	pop	ar7
                           1773 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:296: if (P2_1 == 0) {
   06D0 20 A1 5D           1774 	jb	_P2_1,00212$
                           1775 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:297: if (mode == 1) {
   06D3 C0 00              1776 	push	ar0
   06D5 E5*00              1777 	mov	a,_bp
   06D7 24 08              1778 	add	a,#0x08
   06D9 F8                 1779 	mov	r0,a
   06DA B6 01 04           1780 	cjne	@r0,#0x01,00425$
   06DD D0 00              1781 	pop	ar0
   06DF 80 4F              1782 	sjmp	00212$
   06E1                    1783 00425$:
                           1784 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:299: } else if (mode == 2) {
   06E1 E5*00              1785 	mov	a,_bp
   06E3 24 08              1786 	add	a,#0x08
   06E5 F8                 1787 	mov	r0,a
   06E6 B6 02 02           1788 	cjne	@r0,#0x02,00426$
   06E9 80 04              1789 	sjmp	00427$
   06EB                    1790 00426$:
   06EB D0 00              1791 	pop	ar0
   06ED 80 19              1792 	sjmp	00204$
   06EF                    1793 00427$:
                           1794 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:300: if (++mode2_change_place == 6) {
   06EF A8*00              1795 	mov	r0,_bp
   06F1 08                 1796 	inc	r0
   06F2 06                 1797 	inc	@r0
   06F3 A8*00              1798 	mov	r0,_bp
   06F5 08                 1799 	inc	r0
   06F6 B6 06 02           1800 	cjne	@r0,#0x06,00428$
   06F9 80 04              1801 	sjmp	00429$
   06FB                    1802 00428$:
   06FB D0 00              1803 	pop	ar0
   06FD 80 31              1804 	sjmp	00212$
   06FF                    1805 00429$:
                           1806 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:301: mode2_change_place = 0;
   06FF A8*00              1807 	mov	r0,_bp
   0701 08                 1808 	inc	r0
   0702 76 00              1809 	mov	@r0,#0x00
   0704 D0 00              1810 	pop	ar0
   0706 80 28              1811 	sjmp	00212$
   0708                    1812 00204$:
                           1813 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:303: } else if (mode == 3) {
   0708 C0 00              1814 	push	ar0
   070A E5*00              1815 	mov	a,_bp
   070C 24 08              1816 	add	a,#0x08
   070E F8                 1817 	mov	r0,a
   070F B6 03 04           1818 	cjne	@r0,#0x03,00430$
   0712 D0 00              1819 	pop	ar0
   0714 80 1A              1820 	sjmp	00212$
   0716                    1821 00430$:
                           1822 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:305: } else if (mode == 4) {
   0716 E5*00              1823 	mov	a,_bp
   0718 24 08              1824 	add	a,#0x08
   071A F8                 1825 	mov	r0,a
   071B B6 04 02           1826 	cjne	@r0,#0x04,00431$
   071E 80 04              1827 	sjmp	00432$
   0720                    1828 00431$:
   0720 D0 00              1829 	pop	ar0
   0722 80 0C              1830 	sjmp	00212$
   0724                    1831 00432$:
   0724 D0 00              1832 	pop	ar0
                           1833 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:306: if (++change_time == 3) {
   0726 05*0F              1834 	inc	_change_time
   0728 74 03              1835 	mov	a,#0x03
   072A B5*0F 03           1836 	cjne	a,_change_time,00212$
                           1837 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:307: change_time = 0;
   072D 75*0F 00           1838 	mov	_change_time,#0x00
   0730                    1839 00212$:
                           1840 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:314: if (mode == 1) { // 一般模式
   0730 C0 00              1841 	push	ar0
   0732 E5*00              1842 	mov	a,_bp
   0734 24 08              1843 	add	a,#0x08
   0736 F8                 1844 	mov	r0,a
   0737 B6 01 02           1845 	cjne	@r0,#0x01,00435$
   073A 80 04              1846 	sjmp	00436$
   073C                    1847 00435$:
   073C D0 00              1848 	pop	ar0
   073E 80 49              1849 	sjmp	00270$
   0740                    1850 00436$:
   0740 D0 00              1851 	pop	ar0
                           1852 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:315: for (i = 0; i <= 8; i++) {
   0742 75*12 00           1853 	mov	_i,#0x00
   0745                    1854 00275$:
   0745 C3                 1855 	clr	c
   0746 74 88              1856 	mov	a,#(0x08 ^ 0x80)
   0748 85*12 F0           1857 	mov	b,_i
   074B 63 F0 80           1858 	xrl	b,#0x80
   074E 95 F0              1859 	subb	a,b
   0750 40 1C              1860 	jc	00278$
                           1861 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:316: Write7219(i, 0x0f);
   0752 85*12 82           1862 	mov	dpl,_i
   0755 C0 07              1863 	push	ar7
   0757 C0 00              1864 	push	ar0
   0759 C0 01              1865 	push	ar1
   075B 74 0F              1866 	mov	a,#0x0F
   075D C0 E0              1867 	push	acc
   075F 12s00r3D           1868 	lcall	_Write7219
   0762 15 81              1869 	dec	sp
   0764 D0 01              1870 	pop	ar1
   0766 D0 00              1871 	pop	ar0
   0768 D0 07              1872 	pop	ar7
                           1873 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:315: for (i = 0; i <= 8; i++) {
   076A 05*12              1874 	inc	_i
   076C 80 D7              1875 	sjmp	00275$
   076E                    1876 00278$:
                           1877 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:318: Write7219(1, 1);
   076E C0 07              1878 	push	ar7
   0770 C0 00              1879 	push	ar0
   0772 C0 01              1880 	push	ar1
   0774 74 01              1881 	mov	a,#0x01
   0776 C0 E0              1882 	push	acc
   0778 75 82 01           1883 	mov	dpl,#0x01
   077B 12s00r3D           1884 	lcall	_Write7219
   077E 15 81              1885 	dec	sp
   0780 D0 01              1886 	pop	ar1
   0782 D0 00              1887 	pop	ar0
   0784 D0 07              1888 	pop	ar7
   0786 02s12rEE           1889 	ljmp	00271$
   0789                    1890 00270$:
                           1891 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:319: } else if (mode == 2) { // 設定自動時間模式
   0789 C0 00              1892 	push	ar0
   078B E5*00              1893 	mov	a,_bp
   078D 24 08              1894 	add	a,#0x08
   078F F8                 1895 	mov	r0,a
   0790 B6 02 02           1896 	cjne	@r0,#0x02,00438$
   0793 80 05              1897 	sjmp	00439$
   0795                    1898 00438$:
   0795 D0 00              1899 	pop	ar0
   0797 02s11r51           1900 	ljmp	00267$
   079A                    1901 00439$:
                           1902 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:320: if (mode2_change_place < 3) {
   079A A8*00              1903 	mov	r0,_bp
   079C 08                 1904 	inc	r0
   079D C3                 1905 	clr	c
   079E E6                 1906 	mov	a,@r0
   079F 64 80              1907 	xrl	a,#0x80
   07A1 94 83              1908 	subb	a,#0x83
   07A3 D0 00              1909 	pop	ar0
   07A5 40 03              1910 	jc	00440$
   07A7 02s0BrE3           1911 	ljmp	00249$
   07AA                    1912 00440$:
                           1913 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:321: if (mode2_change_place == 0) {
   07AA C0 00              1914 	push	ar0
   07AC A8*00              1915 	mov	r0,_bp
   07AE 08                 1916 	inc	r0
   07AF E6                 1917 	mov	a,@r0
   07B0 D0 00              1918 	pop	ar0
   07B2 60 03              1919 	jz	00441$
   07B4 02s09r0D           1920 	ljmp	00229$
   07B7                    1921 00441$:
                           1922 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:322: if (time_count >= 50) {
   07B7 C3                 1923 	clr	c
   07B8 E5*08              1924 	mov	a,_time_count
   07BA 94 32              1925 	subb	a,#0x32
   07BC E5*09              1926 	mov	a,(_time_count + 1)
   07BE 94 00              1927 	subb	a,#0x00
   07C0 40 60              1928 	jc	00215$
                           1929 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:323: Write7219(8, open_close_time[0] / 10);
   07C2 C0 07              1930 	push	ar7
   07C4 86 07              1931 	mov	ar7,@r0
   07C6 C2 D5              1932 	clr	F0
   07C8 75 F0 0A           1933 	mov	b,#0x0a
   07CB EF                 1934 	mov	a,r7
   07CC 30 E7 04           1935 	jnb	acc.7,00443$
   07CF B2 D5              1936 	cpl	F0
   07D1 F4                 1937 	cpl	a
   07D2 04                 1938 	inc	a
   07D3                    1939 00443$:
   07D3 84                 1940 	div	ab
   07D4 30 D5 02           1941 	jnb	F0,00444$
   07D7 F4                 1942 	cpl	a
   07D8 04                 1943 	inc	a
   07D9                    1944 00444$:
   07D9 FF                 1945 	mov	r7,a
   07DA C0 07              1946 	push	ar7
   07DC C0 00              1947 	push	ar0
   07DE C0 01              1948 	push	ar1
   07E0 C0 07              1949 	push	ar7
   07E2 75 82 08           1950 	mov	dpl,#0x08
   07E5 12s00r3D           1951 	lcall	_Write7219
   07E8 15 81              1952 	dec	sp
   07EA D0 01              1953 	pop	ar1
   07EC D0 00              1954 	pop	ar0
   07EE D0 07              1955 	pop	ar7
                           1956 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:324: Write7219(7, open_close_time[0] % 10); 
   07F0 86 07              1957 	mov	ar7,@r0
   07F2 75 F0 0A           1958 	mov	b,#0x0a
   07F5 EF                 1959 	mov	a,r7
   07F6 C2 D5              1960 	clr	F0
   07F8 30 E7 04           1961 	jnb	acc.7,00445$
   07FB D2 D5              1962 	setb	F0
   07FD F4                 1963 	cpl	a
   07FE 04                 1964 	inc	a
   07FF                    1965 00445$:
   07FF 84                 1966 	div	ab
   0800 E5 F0              1967 	mov	a,b
   0802 30 D5 02           1968 	jnb	F0,00446$
   0805 F4                 1969 	cpl	a
   0806 04                 1970 	inc	a
   0807                    1971 00446$:
   0807 FF                 1972 	mov	r7,a
   0808 C0 07              1973 	push	ar7
   080A C0 00              1974 	push	ar0
   080C C0 01              1975 	push	ar1
   080E C0 07              1976 	push	ar7
   0810 75 82 07           1977 	mov	dpl,#0x07
   0813 12s00r3D           1978 	lcall	_Write7219
   0816 15 81              1979 	dec	sp
   0818 D0 01              1980 	pop	ar1
   081A D0 00              1981 	pop	ar0
   081C D0 07              1982 	pop	ar7
   081E D0 07              1983 	pop	ar7
   0820 80 24              1984 	sjmp	00216$
   0822                    1985 00215$:
                           1986 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:326: Write7219(8, 0x0f);
   0822 C0 07              1987 	push	ar7
   0824 C0 00              1988 	push	ar0
   0826 C0 01              1989 	push	ar1
   0828 74 0F              1990 	mov	a,#0x0F
   082A C0 E0              1991 	push	acc
   082C 75 82 08           1992 	mov	dpl,#0x08
   082F 12s00r3D           1993 	lcall	_Write7219
   0832 15 81              1994 	dec	sp
                           1995 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:327: Write7219(7, 0x0f); 
   0834 74 0F              1996 	mov	a,#0x0F
   0836 C0 E0              1997 	push	acc
   0838 75 82 07           1998 	mov	dpl,#0x07
   083B 12s00r3D           1999 	lcall	_Write7219
   083E 15 81              2000 	dec	sp
   0840 D0 01              2001 	pop	ar1
   0842 D0 00              2002 	pop	ar0
   0844 D0 07              2003 	pop	ar7
   0846                    2004 00216$:
                           2005 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:329: Write7219(6, open_close_time[1] / 10);
   0846 C0 00              2006 	push	ar0
   0848 87 06              2007 	mov	ar6,@r1
   084A C2 D5              2008 	clr	F0
   084C 75 F0 0A           2009 	mov	b,#0x0a
   084F EE                 2010 	mov	a,r6
   0850 30 E7 04           2011 	jnb	acc.7,00447$
   0853 B2 D5              2012 	cpl	F0
   0855 F4                 2013 	cpl	a
   0856 04                 2014 	inc	a
   0857                    2015 00447$:
   0857 84                 2016 	div	ab
   0858 30 D5 02           2017 	jnb	F0,00448$
   085B F4                 2018 	cpl	a
   085C 04                 2019 	inc	a
   085D                    2020 00448$:
   085D FE                 2021 	mov	r6,a
   085E C0 07              2022 	push	ar7
   0860 C0 00              2023 	push	ar0
   0862 C0 01              2024 	push	ar1
   0864 C0 06              2025 	push	ar6
   0866 75 82 06           2026 	mov	dpl,#0x06
   0869 12s00r3D           2027 	lcall	_Write7219
   086C 15 81              2028 	dec	sp
   086E D0 01              2029 	pop	ar1
   0870 D0 00              2030 	pop	ar0
   0872 D0 07              2031 	pop	ar7
                           2032 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:330: Write7219(5, open_close_time[1] % 10);
   0874 87 06              2033 	mov	ar6,@r1
   0876 75 F0 0A           2034 	mov	b,#0x0a
   0879 EE                 2035 	mov	a,r6
   087A C2 D5              2036 	clr	F0
   087C 30 E7 04           2037 	jnb	acc.7,00449$
   087F D2 D5              2038 	setb	F0
   0881 F4                 2039 	cpl	a
   0882 04                 2040 	inc	a
   0883                    2041 00449$:
   0883 84                 2042 	div	ab
   0884 E5 F0              2043 	mov	a,b
   0886 30 D5 02           2044 	jnb	F0,00450$
   0889 F4                 2045 	cpl	a
   088A 04                 2046 	inc	a
   088B                    2047 00450$:
   088B FE                 2048 	mov	r6,a
   088C C0 07              2049 	push	ar7
   088E C0 00              2050 	push	ar0
   0890 C0 01              2051 	push	ar1
   0892 C0 06              2052 	push	ar6
   0894 75 82 05           2053 	mov	dpl,#0x05
   0897 12s00r3D           2054 	lcall	_Write7219
   089A 15 81              2055 	dec	sp
   089C D0 01              2056 	pop	ar1
   089E D0 00              2057 	pop	ar0
   08A0 D0 07              2058 	pop	ar7
                           2059 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:331: Write7219(4, open_close_time[2] / 10);
   08A2 C0 00              2060 	push	ar0
   08A4 A8 07              2061 	mov	r0,ar7
   08A6 86 06              2062 	mov	ar6,@r0
   08A8 D0 00              2063 	pop	ar0
   08AA C2 D5              2064 	clr	F0
   08AC 75 F0 0A           2065 	mov	b,#0x0a
   08AF EE                 2066 	mov	a,r6
   08B0 30 E7 04           2067 	jnb	acc.7,00451$
   08B3 B2 D5              2068 	cpl	F0
   08B5 F4                 2069 	cpl	a
   08B6 04                 2070 	inc	a
   08B7                    2071 00451$:
   08B7 84                 2072 	div	ab
   08B8 30 D5 02           2073 	jnb	F0,00452$
   08BB F4                 2074 	cpl	a
   08BC 04                 2075 	inc	a
   08BD                    2076 00452$:
   08BD FE                 2077 	mov	r6,a
   08BE C0 07              2078 	push	ar7
   08C0 C0 00              2079 	push	ar0
   08C2 C0 01              2080 	push	ar1
   08C4 C0 06              2081 	push	ar6
   08C6 75 82 04           2082 	mov	dpl,#0x04
   08C9 12s00r3D           2083 	lcall	_Write7219
   08CC 15 81              2084 	dec	sp
   08CE D0 01              2085 	pop	ar1
   08D0 D0 00              2086 	pop	ar0
   08D2 D0 07              2087 	pop	ar7
                           2088 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:332: Write7219(3, open_close_time[2] % 10);
   08D4 C0 00              2089 	push	ar0
   08D6 A8 07              2090 	mov	r0,ar7
   08D8 86 06              2091 	mov	ar6,@r0
   08DA D0 00              2092 	pop	ar0
   08DC 75 F0 0A           2093 	mov	b,#0x0a
   08DF EE                 2094 	mov	a,r6
   08E0 C2 D5              2095 	clr	F0
   08E2 30 E7 04           2096 	jnb	acc.7,00453$
   08E5 D2 D5              2097 	setb	F0
   08E7 F4                 2098 	cpl	a
   08E8 04                 2099 	inc	a
   08E9                    2100 00453$:
   08E9 84                 2101 	div	ab
   08EA E5 F0              2102 	mov	a,b
   08EC 30 D5 02           2103 	jnb	F0,00454$
   08EF F4                 2104 	cpl	a
   08F0 04                 2105 	inc	a
   08F1                    2106 00454$:
   08F1 FE                 2107 	mov	r6,a
   08F2 C0 07              2108 	push	ar7
   08F4 C0 00              2109 	push	ar0
   08F6 C0 01              2110 	push	ar1
   08F8 C0 06              2111 	push	ar6
   08FA 75 82 03           2112 	mov	dpl,#0x03
   08FD 12s00r3D           2113 	lcall	_Write7219
   0900 15 81              2114 	dec	sp
   0902 D0 01              2115 	pop	ar1
   0904 D0 00              2116 	pop	ar0
   0906 D0 07              2117 	pop	ar7
   0908 D0 00              2118 	pop	ar0
   090A 02s0BrC8           2119 	ljmp	00230$
   090D                    2120 00229$:
                           2121 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:333: } else if (mode2_change_place == 1) {
   090D C0 00              2122 	push	ar0
   090F A8*00              2123 	mov	r0,_bp
   0911 08                 2124 	inc	r0
   0912 B6 01 02           2125 	cjne	@r0,#0x01,00455$
   0915 80 05              2126 	sjmp	00456$
   0917                    2127 00455$:
   0917 D0 00              2128 	pop	ar0
   0919 02s0Ar6C           2129 	ljmp	00226$
   091C                    2130 00456$:
   091C D0 00              2131 	pop	ar0
                           2132 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:334: if (time_count >= 50) {
   091E C3                 2133 	clr	c
   091F E5*08              2134 	mov	a,_time_count
   0921 94 32              2135 	subb	a,#0x32
   0923 E5*09              2136 	mov	a,(_time_count + 1)
   0925 94 00              2137 	subb	a,#0x00
   0927 40 5C              2138 	jc	00218$
                           2139 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:335: Write7219(6, open_close_time[1] / 10);
   0929 87 06              2140 	mov	ar6,@r1
   092B C2 D5              2141 	clr	F0
   092D 75 F0 0A           2142 	mov	b,#0x0a
   0930 EE                 2143 	mov	a,r6
   0931 30 E7 04           2144 	jnb	acc.7,00458$
   0934 B2 D5              2145 	cpl	F0
   0936 F4                 2146 	cpl	a
   0937 04                 2147 	inc	a
   0938                    2148 00458$:
   0938 84                 2149 	div	ab
   0939 30 D5 02           2150 	jnb	F0,00459$
   093C F4                 2151 	cpl	a
   093D 04                 2152 	inc	a
   093E                    2153 00459$:
   093E FE                 2154 	mov	r6,a
   093F C0 07              2155 	push	ar7
   0941 C0 00              2156 	push	ar0
   0943 C0 01              2157 	push	ar1
   0945 C0 06              2158 	push	ar6
   0947 75 82 06           2159 	mov	dpl,#0x06
   094A 12s00r3D           2160 	lcall	_Write7219
   094D 15 81              2161 	dec	sp
   094F D0 01              2162 	pop	ar1
   0951 D0 00              2163 	pop	ar0
   0953 D0 07              2164 	pop	ar7
                           2165 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:336: Write7219(5, open_close_time[1] % 10);
   0955 87 06              2166 	mov	ar6,@r1
   0957 75 F0 0A           2167 	mov	b,#0x0a
   095A EE                 2168 	mov	a,r6
   095B C2 D5              2169 	clr	F0
   095D 30 E7 04           2170 	jnb	acc.7,00460$
   0960 D2 D5              2171 	setb	F0
   0962 F4                 2172 	cpl	a
   0963 04                 2173 	inc	a
   0964                    2174 00460$:
   0964 84                 2175 	div	ab
   0965 E5 F0              2176 	mov	a,b
   0967 30 D5 02           2177 	jnb	F0,00461$
   096A F4                 2178 	cpl	a
   096B 04                 2179 	inc	a
   096C                    2180 00461$:
   096C FE                 2181 	mov	r6,a
   096D C0 07              2182 	push	ar7
   096F C0 00              2183 	push	ar0
   0971 C0 01              2184 	push	ar1
   0973 C0 06              2185 	push	ar6
   0975 75 82 05           2186 	mov	dpl,#0x05
   0978 12s00r3D           2187 	lcall	_Write7219
   097B 15 81              2188 	dec	sp
   097D D0 01              2189 	pop	ar1
   097F D0 00              2190 	pop	ar0
   0981 D0 07              2191 	pop	ar7
   0983 80 24              2192 	sjmp	00219$
   0985                    2193 00218$:
                           2194 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:338: Write7219(6, 0x0f);
   0985 C0 07              2195 	push	ar7
   0987 C0 00              2196 	push	ar0
   0989 C0 01              2197 	push	ar1
   098B 74 0F              2198 	mov	a,#0x0F
   098D C0 E0              2199 	push	acc
   098F 75 82 06           2200 	mov	dpl,#0x06
   0992 12s00r3D           2201 	lcall	_Write7219
   0995 15 81              2202 	dec	sp
                           2203 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:339: Write7219(5, 0x0f); 
   0997 74 0F              2204 	mov	a,#0x0F
   0999 C0 E0              2205 	push	acc
   099B 75 82 05           2206 	mov	dpl,#0x05
   099E 12s00r3D           2207 	lcall	_Write7219
   09A1 15 81              2208 	dec	sp
   09A3 D0 01              2209 	pop	ar1
   09A5 D0 00              2210 	pop	ar0
   09A7 D0 07              2211 	pop	ar7
   09A9                    2212 00219$:
                           2213 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:341: Write7219(8, open_close_time[0] / 10);
   09A9 86 06              2214 	mov	ar6,@r0
   09AB C2 D5              2215 	clr	F0
   09AD 75 F0 0A           2216 	mov	b,#0x0a
   09B0 EE                 2217 	mov	a,r6
   09B1 30 E7 04           2218 	jnb	acc.7,00462$
   09B4 B2 D5              2219 	cpl	F0
   09B6 F4                 2220 	cpl	a
   09B7 04                 2221 	inc	a
   09B8                    2222 00462$:
   09B8 84                 2223 	div	ab
   09B9 30 D5 02           2224 	jnb	F0,00463$
   09BC F4                 2225 	cpl	a
   09BD 04                 2226 	inc	a
   09BE                    2227 00463$:
   09BE FE                 2228 	mov	r6,a
   09BF C0 07              2229 	push	ar7
   09C1 C0 00              2230 	push	ar0
   09C3 C0 01              2231 	push	ar1
   09C5 C0 06              2232 	push	ar6
   09C7 75 82 08           2233 	mov	dpl,#0x08
   09CA 12s00r3D           2234 	lcall	_Write7219
   09CD 15 81              2235 	dec	sp
   09CF D0 01              2236 	pop	ar1
   09D1 D0 00              2237 	pop	ar0
   09D3 D0 07              2238 	pop	ar7
                           2239 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:342: Write7219(7, open_close_time[0] % 10); 
   09D5 86 06              2240 	mov	ar6,@r0
   09D7 75 F0 0A           2241 	mov	b,#0x0a
   09DA EE                 2242 	mov	a,r6
   09DB C2 D5              2243 	clr	F0
   09DD 30 E7 04           2244 	jnb	acc.7,00464$
   09E0 D2 D5              2245 	setb	F0
   09E2 F4                 2246 	cpl	a
   09E3 04                 2247 	inc	a
   09E4                    2248 00464$:
   09E4 84                 2249 	div	ab
   09E5 E5 F0              2250 	mov	a,b
   09E7 30 D5 02           2251 	jnb	F0,00465$
   09EA F4                 2252 	cpl	a
   09EB 04                 2253 	inc	a
   09EC                    2254 00465$:
   09EC FE                 2255 	mov	r6,a
   09ED C0 07              2256 	push	ar7
   09EF C0 00              2257 	push	ar0
   09F1 C0 01              2258 	push	ar1
   09F3 C0 06              2259 	push	ar6
   09F5 75 82 07           2260 	mov	dpl,#0x07
   09F8 12s00r3D           2261 	lcall	_Write7219
   09FB 15 81              2262 	dec	sp
   09FD D0 01              2263 	pop	ar1
   09FF D0 00              2264 	pop	ar0
   0A01 D0 07              2265 	pop	ar7
                           2266 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:343: Write7219(4, open_close_time[2] / 10);
   0A03 C0 00              2267 	push	ar0
   0A05 A8 07              2268 	mov	r0,ar7
   0A07 86 06              2269 	mov	ar6,@r0
   0A09 D0 00              2270 	pop	ar0
   0A0B C2 D5              2271 	clr	F0
   0A0D 75 F0 0A           2272 	mov	b,#0x0a
   0A10 EE                 2273 	mov	a,r6
   0A11 30 E7 04           2274 	jnb	acc.7,00466$
   0A14 B2 D5              2275 	cpl	F0
   0A16 F4                 2276 	cpl	a
   0A17 04                 2277 	inc	a
   0A18                    2278 00466$:
   0A18 84                 2279 	div	ab
   0A19 30 D5 02           2280 	jnb	F0,00467$
   0A1C F4                 2281 	cpl	a
   0A1D 04                 2282 	inc	a
   0A1E                    2283 00467$:
   0A1E FE                 2284 	mov	r6,a
   0A1F C0 07              2285 	push	ar7
   0A21 C0 00              2286 	push	ar0
   0A23 C0 01              2287 	push	ar1
   0A25 C0 06              2288 	push	ar6
   0A27 75 82 04           2289 	mov	dpl,#0x04
   0A2A 12s00r3D           2290 	lcall	_Write7219
   0A2D 15 81              2291 	dec	sp
   0A2F D0 01              2292 	pop	ar1
   0A31 D0 00              2293 	pop	ar0
   0A33 D0 07              2294 	pop	ar7
                           2295 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:344: Write7219(3, open_close_time[2] % 10);
   0A35 C0 00              2296 	push	ar0
   0A37 A8 07              2297 	mov	r0,ar7
   0A39 86 06              2298 	mov	ar6,@r0
   0A3B D0 00              2299 	pop	ar0
   0A3D 75 F0 0A           2300 	mov	b,#0x0a
   0A40 EE                 2301 	mov	a,r6
   0A41 C2 D5              2302 	clr	F0
   0A43 30 E7 04           2303 	jnb	acc.7,00468$
   0A46 D2 D5              2304 	setb	F0
   0A48 F4                 2305 	cpl	a
   0A49 04                 2306 	inc	a
   0A4A                    2307 00468$:
   0A4A 84                 2308 	div	ab
   0A4B E5 F0              2309 	mov	a,b
   0A4D 30 D5 02           2310 	jnb	F0,00469$
   0A50 F4                 2311 	cpl	a
   0A51 04                 2312 	inc	a
   0A52                    2313 00469$:
   0A52 FE                 2314 	mov	r6,a
   0A53 C0 07              2315 	push	ar7
   0A55 C0 00              2316 	push	ar0
   0A57 C0 01              2317 	push	ar1
   0A59 C0 06              2318 	push	ar6
   0A5B 75 82 03           2319 	mov	dpl,#0x03
   0A5E 12s00r3D           2320 	lcall	_Write7219
   0A61 15 81              2321 	dec	sp
   0A63 D0 01              2322 	pop	ar1
   0A65 D0 00              2323 	pop	ar0
   0A67 D0 07              2324 	pop	ar7
   0A69 02s0BrC8           2325 	ljmp	00230$
   0A6C                    2326 00226$:
                           2327 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:345: } else if (mode2_change_place == 2) {
   0A6C C0 00              2328 	push	ar0
   0A6E A8*00              2329 	mov	r0,_bp
   0A70 08                 2330 	inc	r0
   0A71 B6 02 02           2331 	cjne	@r0,#0x02,00470$
   0A74 80 05              2332 	sjmp	00471$
   0A76                    2333 00470$:
   0A76 D0 00              2334 	pop	ar0
   0A78 02s0BrC8           2335 	ljmp	00230$
   0A7B                    2336 00471$:
   0A7B D0 00              2337 	pop	ar0
                           2338 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:346: if (time_count >= 50) {
   0A7D C3                 2339 	clr	c
   0A7E E5*08              2340 	mov	a,_time_count
   0A80 94 32              2341 	subb	a,#0x32
   0A82 E5*09              2342 	mov	a,(_time_count + 1)
   0A84 94 00              2343 	subb	a,#0x00
   0A86 40 68              2344 	jc	00221$
                           2345 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:347: Write7219(4, open_close_time[2] / 10);
   0A88 C0 00              2346 	push	ar0
   0A8A A8 07              2347 	mov	r0,ar7
   0A8C 86 06              2348 	mov	ar6,@r0
   0A8E D0 00              2349 	pop	ar0
   0A90 C2 D5              2350 	clr	F0
   0A92 75 F0 0A           2351 	mov	b,#0x0a
   0A95 EE                 2352 	mov	a,r6
   0A96 30 E7 04           2353 	jnb	acc.7,00473$
   0A99 B2 D5              2354 	cpl	F0
   0A9B F4                 2355 	cpl	a
   0A9C 04                 2356 	inc	a
   0A9D                    2357 00473$:
   0A9D 84                 2358 	div	ab
   0A9E 30 D5 02           2359 	jnb	F0,00474$
   0AA1 F4                 2360 	cpl	a
   0AA2 04                 2361 	inc	a
   0AA3                    2362 00474$:
   0AA3 FE                 2363 	mov	r6,a
   0AA4 C0 07              2364 	push	ar7
   0AA6 C0 00              2365 	push	ar0
   0AA8 C0 01              2366 	push	ar1
   0AAA C0 06              2367 	push	ar6
   0AAC 75 82 04           2368 	mov	dpl,#0x04
   0AAF 12s00r3D           2369 	lcall	_Write7219
   0AB2 15 81              2370 	dec	sp
   0AB4 D0 01              2371 	pop	ar1
   0AB6 D0 00              2372 	pop	ar0
   0AB8 D0 07              2373 	pop	ar7
                           2374 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:348: Write7219(3, open_close_time[2] % 10);
   0ABA C0 00              2375 	push	ar0
   0ABC A8 07              2376 	mov	r0,ar7
   0ABE 86 06              2377 	mov	ar6,@r0
   0AC0 D0 00              2378 	pop	ar0
   0AC2 75 F0 0A           2379 	mov	b,#0x0a
   0AC5 EE                 2380 	mov	a,r6
   0AC6 C2 D5              2381 	clr	F0
   0AC8 30 E7 04           2382 	jnb	acc.7,00475$
   0ACB D2 D5              2383 	setb	F0
   0ACD F4                 2384 	cpl	a
   0ACE 04                 2385 	inc	a
   0ACF                    2386 00475$:
   0ACF 84                 2387 	div	ab
   0AD0 E5 F0              2388 	mov	a,b
   0AD2 30 D5 02           2389 	jnb	F0,00476$
   0AD5 F4                 2390 	cpl	a
   0AD6 04                 2391 	inc	a
   0AD7                    2392 00476$:
   0AD7 FE                 2393 	mov	r6,a
   0AD8 C0 07              2394 	push	ar7
   0ADA C0 00              2395 	push	ar0
   0ADC C0 01              2396 	push	ar1
   0ADE C0 06              2397 	push	ar6
   0AE0 75 82 03           2398 	mov	dpl,#0x03
   0AE3 12s00r3D           2399 	lcall	_Write7219
   0AE6 15 81              2400 	dec	sp
   0AE8 D0 01              2401 	pop	ar1
   0AEA D0 00              2402 	pop	ar0
   0AEC D0 07              2403 	pop	ar7
   0AEE 80 24              2404 	sjmp	00222$
   0AF0                    2405 00221$:
                           2406 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:350: Write7219(4, 0x0f);
   0AF0 C0 07              2407 	push	ar7
   0AF2 C0 00              2408 	push	ar0
   0AF4 C0 01              2409 	push	ar1
   0AF6 74 0F              2410 	mov	a,#0x0F
   0AF8 C0 E0              2411 	push	acc
   0AFA 75 82 04           2412 	mov	dpl,#0x04
   0AFD 12s00r3D           2413 	lcall	_Write7219
   0B00 15 81              2414 	dec	sp
                           2415 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:351: Write7219(3, 0x0f); 
   0B02 74 0F              2416 	mov	a,#0x0F
   0B04 C0 E0              2417 	push	acc
   0B06 75 82 03           2418 	mov	dpl,#0x03
   0B09 12s00r3D           2419 	lcall	_Write7219
   0B0C 15 81              2420 	dec	sp
   0B0E D0 01              2421 	pop	ar1
   0B10 D0 00              2422 	pop	ar0
   0B12 D0 07              2423 	pop	ar7
   0B14                    2424 00222$:
                           2425 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:353: Write7219(6, open_close_time[1] / 10);
   0B14 87 06              2426 	mov	ar6,@r1
   0B16 C2 D5              2427 	clr	F0
   0B18 75 F0 0A           2428 	mov	b,#0x0a
   0B1B EE                 2429 	mov	a,r6
   0B1C 30 E7 04           2430 	jnb	acc.7,00477$
   0B1F B2 D5              2431 	cpl	F0
   0B21 F4                 2432 	cpl	a
   0B22 04                 2433 	inc	a
   0B23                    2434 00477$:
   0B23 84                 2435 	div	ab
   0B24 30 D5 02           2436 	jnb	F0,00478$
   0B27 F4                 2437 	cpl	a
   0B28 04                 2438 	inc	a
   0B29                    2439 00478$:
   0B29 FE                 2440 	mov	r6,a
   0B2A C0 07              2441 	push	ar7
   0B2C C0 00              2442 	push	ar0
   0B2E C0 01              2443 	push	ar1
   0B30 C0 06              2444 	push	ar6
   0B32 75 82 06           2445 	mov	dpl,#0x06
   0B35 12s00r3D           2446 	lcall	_Write7219
   0B38 15 81              2447 	dec	sp
   0B3A D0 01              2448 	pop	ar1
   0B3C D0 00              2449 	pop	ar0
   0B3E D0 07              2450 	pop	ar7
                           2451 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:354: Write7219(5, open_close_time[1] % 10);
   0B40 87 06              2452 	mov	ar6,@r1
   0B42 75 F0 0A           2453 	mov	b,#0x0a
   0B45 EE                 2454 	mov	a,r6
   0B46 C2 D5              2455 	clr	F0
   0B48 30 E7 04           2456 	jnb	acc.7,00479$
   0B4B D2 D5              2457 	setb	F0
   0B4D F4                 2458 	cpl	a
   0B4E 04                 2459 	inc	a
   0B4F                    2460 00479$:
   0B4F 84                 2461 	div	ab
   0B50 E5 F0              2462 	mov	a,b
   0B52 30 D5 02           2463 	jnb	F0,00480$
   0B55 F4                 2464 	cpl	a
   0B56 04                 2465 	inc	a
   0B57                    2466 00480$:
   0B57 FE                 2467 	mov	r6,a
   0B58 C0 07              2468 	push	ar7
   0B5A C0 00              2469 	push	ar0
   0B5C C0 01              2470 	push	ar1
   0B5E C0 06              2471 	push	ar6
   0B60 75 82 05           2472 	mov	dpl,#0x05
   0B63 12s00r3D           2473 	lcall	_Write7219
   0B66 15 81              2474 	dec	sp
   0B68 D0 01              2475 	pop	ar1
   0B6A D0 00              2476 	pop	ar0
   0B6C D0 07              2477 	pop	ar7
                           2478 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:355: Write7219(8, open_close_time[0] / 10);
   0B6E 86 06              2479 	mov	ar6,@r0
   0B70 C2 D5              2480 	clr	F0
   0B72 75 F0 0A           2481 	mov	b,#0x0a
   0B75 EE                 2482 	mov	a,r6
   0B76 30 E7 04           2483 	jnb	acc.7,00481$
   0B79 B2 D5              2484 	cpl	F0
   0B7B F4                 2485 	cpl	a
   0B7C 04                 2486 	inc	a
   0B7D                    2487 00481$:
   0B7D 84                 2488 	div	ab
   0B7E 30 D5 02           2489 	jnb	F0,00482$
   0B81 F4                 2490 	cpl	a
   0B82 04                 2491 	inc	a
   0B83                    2492 00482$:
   0B83 FE                 2493 	mov	r6,a
   0B84 C0 07              2494 	push	ar7
   0B86 C0 00              2495 	push	ar0
   0B88 C0 01              2496 	push	ar1
   0B8A C0 06              2497 	push	ar6
   0B8C 75 82 08           2498 	mov	dpl,#0x08
   0B8F 12s00r3D           2499 	lcall	_Write7219
   0B92 15 81              2500 	dec	sp
   0B94 D0 01              2501 	pop	ar1
   0B96 D0 00              2502 	pop	ar0
   0B98 D0 07              2503 	pop	ar7
                           2504 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:356: Write7219(7, open_close_time[0] % 10); 
   0B9A 86 06              2505 	mov	ar6,@r0
   0B9C 75 F0 0A           2506 	mov	b,#0x0a
   0B9F EE                 2507 	mov	a,r6
   0BA0 C2 D5              2508 	clr	F0
   0BA2 30 E7 04           2509 	jnb	acc.7,00483$
   0BA5 D2 D5              2510 	setb	F0
   0BA7 F4                 2511 	cpl	a
   0BA8 04                 2512 	inc	a
   0BA9                    2513 00483$:
   0BA9 84                 2514 	div	ab
   0BAA E5 F0              2515 	mov	a,b
   0BAC 30 D5 02           2516 	jnb	F0,00484$
   0BAF F4                 2517 	cpl	a
   0BB0 04                 2518 	inc	a
   0BB1                    2519 00484$:
   0BB1 FE                 2520 	mov	r6,a
   0BB2 C0 07              2521 	push	ar7
   0BB4 C0 00              2522 	push	ar0
   0BB6 C0 01              2523 	push	ar1
   0BB8 C0 06              2524 	push	ar6
   0BBA 75 82 07           2525 	mov	dpl,#0x07
   0BBD 12s00r3D           2526 	lcall	_Write7219
   0BC0 15 81              2527 	dec	sp
   0BC2 D0 01              2528 	pop	ar1
   0BC4 D0 00              2529 	pop	ar0
   0BC6 D0 07              2530 	pop	ar7
   0BC8                    2531 00230$:
                           2532 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:358: Write7219(2, 1);
   0BC8 C0 07              2533 	push	ar7
   0BCA C0 00              2534 	push	ar0
   0BCC C0 01              2535 	push	ar1
   0BCE 74 01              2536 	mov	a,#0x01
   0BD0 C0 E0              2537 	push	acc
   0BD2 75 82 02           2538 	mov	dpl,#0x02
   0BD5 12s00r3D           2539 	lcall	_Write7219
   0BD8 15 81              2540 	dec	sp
   0BDA D0 01              2541 	pop	ar1
   0BDC D0 00              2542 	pop	ar0
   0BDE D0 07              2543 	pop	ar7
   0BE0 02s10rB7           2544 	ljmp	00250$
   0BE3                    2545 00249$:
                           2546 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:360: if (mode2_change_place == 3) {
   0BE3 C0 00              2547 	push	ar0
   0BE5 A8*00              2548 	mov	r0,_bp
   0BE7 08                 2549 	inc	r0
   0BE8 B6 03 02           2550 	cjne	@r0,#0x03,00485$
   0BEB 80 05              2551 	sjmp	00486$
   0BED                    2552 00485$:
   0BED D0 00              2553 	pop	ar0
   0BEF 02s0Dr78           2554 	ljmp	00246$
   0BF2                    2555 00486$:
   0BF2 D0 00              2556 	pop	ar0
                           2557 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:361: if (time_count >= 50) {
   0BF4 C3                 2558 	clr	c
   0BF5 E5*08              2559 	mov	a,_time_count
   0BF7 94 32              2560 	subb	a,#0x32
   0BF9 E5*09              2561 	mov	a,(_time_count + 1)
   0BFB 94 00              2562 	subb	a,#0x00
   0BFD 40 72              2563 	jc	00232$
                           2564 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:362: Write7219(8, open_close_time[3] / 10);
   0BFF C0 00              2565 	push	ar0
   0C01 E5*00              2566 	mov	a,_bp
   0C03 24 0A              2567 	add	a,#0x0a
   0C05 F8                 2568 	mov	r0,a
   0C06 86 00              2569 	mov	ar0,@r0
   0C08 86 06              2570 	mov	ar6,@r0
   0C0A D0 00              2571 	pop	ar0
   0C0C C2 D5              2572 	clr	F0
   0C0E 75 F0 0A           2573 	mov	b,#0x0a
   0C11 EE                 2574 	mov	a,r6
   0C12 30 E7 04           2575 	jnb	acc.7,00488$
   0C15 B2 D5              2576 	cpl	F0
   0C17 F4                 2577 	cpl	a
   0C18 04                 2578 	inc	a
   0C19                    2579 00488$:
   0C19 84                 2580 	div	ab
   0C1A 30 D5 02           2581 	jnb	F0,00489$
   0C1D F4                 2582 	cpl	a
   0C1E 04                 2583 	inc	a
   0C1F                    2584 00489$:
   0C1F FE                 2585 	mov	r6,a
   0C20 C0 07              2586 	push	ar7
   0C22 C0 00              2587 	push	ar0
   0C24 C0 01              2588 	push	ar1
   0C26 C0 06              2589 	push	ar6
   0C28 75 82 08           2590 	mov	dpl,#0x08
   0C2B 12s00r3D           2591 	lcall	_Write7219
   0C2E 15 81              2592 	dec	sp
   0C30 D0 01              2593 	pop	ar1
   0C32 D0 00              2594 	pop	ar0
   0C34 D0 07              2595 	pop	ar7
                           2596 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:363: Write7219(7, open_close_time[3] % 10); 
   0C36 C0 00              2597 	push	ar0
   0C38 E5*00              2598 	mov	a,_bp
   0C3A 24 0A              2599 	add	a,#0x0a
   0C3C F8                 2600 	mov	r0,a
   0C3D 86 00              2601 	mov	ar0,@r0
   0C3F 86 06              2602 	mov	ar6,@r0
   0C41 D0 00              2603 	pop	ar0
   0C43 75 F0 0A           2604 	mov	b,#0x0a
   0C46 EE                 2605 	mov	a,r6
   0C47 C2 D5              2606 	clr	F0
   0C49 30 E7 04           2607 	jnb	acc.7,00490$
   0C4C D2 D5              2608 	setb	F0
   0C4E F4                 2609 	cpl	a
   0C4F 04                 2610 	inc	a
   0C50                    2611 00490$:
   0C50 84                 2612 	div	ab
   0C51 E5 F0              2613 	mov	a,b
   0C53 30 D5 02           2614 	jnb	F0,00491$
   0C56 F4                 2615 	cpl	a
   0C57 04                 2616 	inc	a
   0C58                    2617 00491$:
   0C58 FE                 2618 	mov	r6,a
   0C59 C0 07              2619 	push	ar7
   0C5B C0 00              2620 	push	ar0
   0C5D C0 01              2621 	push	ar1
   0C5F C0 06              2622 	push	ar6
   0C61 75 82 07           2623 	mov	dpl,#0x07
   0C64 12s00r3D           2624 	lcall	_Write7219
   0C67 15 81              2625 	dec	sp
   0C69 D0 01              2626 	pop	ar1
   0C6B D0 00              2627 	pop	ar0
   0C6D D0 07              2628 	pop	ar7
   0C6F 80 24              2629 	sjmp	00233$
   0C71                    2630 00232$:
                           2631 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:365: Write7219(8, 0x0f);
   0C71 C0 07              2632 	push	ar7
   0C73 C0 00              2633 	push	ar0
   0C75 C0 01              2634 	push	ar1
   0C77 74 0F              2635 	mov	a,#0x0F
   0C79 C0 E0              2636 	push	acc
   0C7B 75 82 08           2637 	mov	dpl,#0x08
   0C7E 12s00r3D           2638 	lcall	_Write7219
   0C81 15 81              2639 	dec	sp
                           2640 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:366: Write7219(7, 0x0f); 
   0C83 74 0F              2641 	mov	a,#0x0F
   0C85 C0 E0              2642 	push	acc
   0C87 75 82 07           2643 	mov	dpl,#0x07
   0C8A 12s00r3D           2644 	lcall	_Write7219
   0C8D 15 81              2645 	dec	sp
   0C8F D0 01              2646 	pop	ar1
   0C91 D0 00              2647 	pop	ar0
   0C93 D0 07              2648 	pop	ar7
   0C95                    2649 00233$:
                           2650 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:368: Write7219(6, open_close_time[4] / 10);
   0C95 C0 00              2651 	push	ar0
   0C97 E5*00              2652 	mov	a,_bp
   0C99 24 0B              2653 	add	a,#0x0b
   0C9B F8                 2654 	mov	r0,a
   0C9C 86 00              2655 	mov	ar0,@r0
   0C9E 86 06              2656 	mov	ar6,@r0
   0CA0 D0 00              2657 	pop	ar0
   0CA2 C2 D5              2658 	clr	F0
   0CA4 75 F0 0A           2659 	mov	b,#0x0a
   0CA7 EE                 2660 	mov	a,r6
   0CA8 30 E7 04           2661 	jnb	acc.7,00492$
   0CAB B2 D5              2662 	cpl	F0
   0CAD F4                 2663 	cpl	a
   0CAE 04                 2664 	inc	a
   0CAF                    2665 00492$:
   0CAF 84                 2666 	div	ab
   0CB0 30 D5 02           2667 	jnb	F0,00493$
   0CB3 F4                 2668 	cpl	a
   0CB4 04                 2669 	inc	a
   0CB5                    2670 00493$:
   0CB5 FE                 2671 	mov	r6,a
   0CB6 C0 07              2672 	push	ar7
   0CB8 C0 00              2673 	push	ar0
   0CBA C0 01              2674 	push	ar1
   0CBC C0 06              2675 	push	ar6
   0CBE 75 82 06           2676 	mov	dpl,#0x06
   0CC1 12s00r3D           2677 	lcall	_Write7219
   0CC4 15 81              2678 	dec	sp
   0CC6 D0 01              2679 	pop	ar1
   0CC8 D0 00              2680 	pop	ar0
   0CCA D0 07              2681 	pop	ar7
                           2682 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:369: Write7219(5, open_close_time[4] % 10);
   0CCC C0 00              2683 	push	ar0
   0CCE E5*00              2684 	mov	a,_bp
   0CD0 24 0B              2685 	add	a,#0x0b
   0CD2 F8                 2686 	mov	r0,a
   0CD3 86 00              2687 	mov	ar0,@r0
   0CD5 86 06              2688 	mov	ar6,@r0
   0CD7 D0 00              2689 	pop	ar0
   0CD9 75 F0 0A           2690 	mov	b,#0x0a
   0CDC EE                 2691 	mov	a,r6
   0CDD C2 D5              2692 	clr	F0
   0CDF 30 E7 04           2693 	jnb	acc.7,00494$
   0CE2 D2 D5              2694 	setb	F0
   0CE4 F4                 2695 	cpl	a
   0CE5 04                 2696 	inc	a
   0CE6                    2697 00494$:
   0CE6 84                 2698 	div	ab
   0CE7 E5 F0              2699 	mov	a,b
   0CE9 30 D5 02           2700 	jnb	F0,00495$
   0CEC F4                 2701 	cpl	a
   0CED 04                 2702 	inc	a
   0CEE                    2703 00495$:
   0CEE FE                 2704 	mov	r6,a
   0CEF C0 07              2705 	push	ar7
   0CF1 C0 00              2706 	push	ar0
   0CF3 C0 01              2707 	push	ar1
   0CF5 C0 06              2708 	push	ar6
   0CF7 75 82 05           2709 	mov	dpl,#0x05
   0CFA 12s00r3D           2710 	lcall	_Write7219
   0CFD 15 81              2711 	dec	sp
   0CFF D0 01              2712 	pop	ar1
   0D01 D0 00              2713 	pop	ar0
   0D03 D0 07              2714 	pop	ar7
                           2715 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:370: Write7219(4, open_close_time[5] / 10);
   0D05 C0 00              2716 	push	ar0
   0D07 E5*00              2717 	mov	a,_bp
   0D09 24 0C              2718 	add	a,#0x0c
   0D0B F8                 2719 	mov	r0,a
   0D0C 86 00              2720 	mov	ar0,@r0
   0D0E 86 06              2721 	mov	ar6,@r0
   0D10 D0 00              2722 	pop	ar0
   0D12 C2 D5              2723 	clr	F0
   0D14 75 F0 0A           2724 	mov	b,#0x0a
   0D17 EE                 2725 	mov	a,r6
   0D18 30 E7 04           2726 	jnb	acc.7,00496$
   0D1B B2 D5              2727 	cpl	F0
   0D1D F4                 2728 	cpl	a
   0D1E 04                 2729 	inc	a
   0D1F                    2730 00496$:
   0D1F 84                 2731 	div	ab
   0D20 30 D5 02           2732 	jnb	F0,00497$
   0D23 F4                 2733 	cpl	a
   0D24 04                 2734 	inc	a
   0D25                    2735 00497$:
   0D25 FE                 2736 	mov	r6,a
   0D26 C0 07              2737 	push	ar7
   0D28 C0 00              2738 	push	ar0
   0D2A C0 01              2739 	push	ar1
   0D2C C0 06              2740 	push	ar6
   0D2E 75 82 04           2741 	mov	dpl,#0x04
   0D31 12s00r3D           2742 	lcall	_Write7219
   0D34 15 81              2743 	dec	sp
   0D36 D0 01              2744 	pop	ar1
   0D38 D0 00              2745 	pop	ar0
   0D3A D0 07              2746 	pop	ar7
                           2747 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:371: Write7219(3, open_close_time[5] % 10);
   0D3C C0 00              2748 	push	ar0
   0D3E E5*00              2749 	mov	a,_bp
   0D40 24 0C              2750 	add	a,#0x0c
   0D42 F8                 2751 	mov	r0,a
   0D43 86 00              2752 	mov	ar0,@r0
   0D45 86 06              2753 	mov	ar6,@r0
   0D47 D0 00              2754 	pop	ar0
   0D49 75 F0 0A           2755 	mov	b,#0x0a
   0D4C EE                 2756 	mov	a,r6
   0D4D C2 D5              2757 	clr	F0
   0D4F 30 E7 04           2758 	jnb	acc.7,00498$
   0D52 D2 D5              2759 	setb	F0
   0D54 F4                 2760 	cpl	a
   0D55 04                 2761 	inc	a
   0D56                    2762 00498$:
   0D56 84                 2763 	div	ab
   0D57 E5 F0              2764 	mov	a,b
   0D59 30 D5 02           2765 	jnb	F0,00499$
   0D5C F4                 2766 	cpl	a
   0D5D 04                 2767 	inc	a
   0D5E                    2768 00499$:
   0D5E FE                 2769 	mov	r6,a
   0D5F C0 07              2770 	push	ar7
   0D61 C0 00              2771 	push	ar0
   0D63 C0 01              2772 	push	ar1
   0D65 C0 06              2773 	push	ar6
   0D67 75 82 03           2774 	mov	dpl,#0x03
   0D6A 12s00r3D           2775 	lcall	_Write7219
   0D6D 15 81              2776 	dec	sp
   0D6F D0 01              2777 	pop	ar1
   0D71 D0 00              2778 	pop	ar0
   0D73 D0 07              2779 	pop	ar7
   0D75 02s10r9F           2780 	ljmp	00247$
   0D78                    2781 00246$:
                           2782 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:372: } else if (mode2_change_place == 4) {
   0D78 C0 00              2783 	push	ar0
   0D7A A8*00              2784 	mov	r0,_bp
   0D7C 08                 2785 	inc	r0
   0D7D B6 04 02           2786 	cjne	@r0,#0x04,00500$
   0D80 80 05              2787 	sjmp	00501$
   0D82                    2788 00500$:
   0D82 D0 00              2789 	pop	ar0
   0D84 02s0Fr0D           2790 	ljmp	00243$
   0D87                    2791 00501$:
   0D87 D0 00              2792 	pop	ar0
                           2793 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:373: if (time_count >= 50) {
   0D89 C3                 2794 	clr	c
   0D8A E5*08              2795 	mov	a,_time_count
   0D8C 94 32              2796 	subb	a,#0x32
   0D8E E5*09              2797 	mov	a,(_time_count + 1)
   0D90 94 00              2798 	subb	a,#0x00
   0D92 40 72              2799 	jc	00235$
                           2800 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:374: Write7219(6, open_close_time[4] / 10);
   0D94 C0 00              2801 	push	ar0
   0D96 E5*00              2802 	mov	a,_bp
   0D98 24 0B              2803 	add	a,#0x0b
   0D9A F8                 2804 	mov	r0,a
   0D9B 86 00              2805 	mov	ar0,@r0
   0D9D 86 06              2806 	mov	ar6,@r0
   0D9F D0 00              2807 	pop	ar0
   0DA1 C2 D5              2808 	clr	F0
   0DA3 75 F0 0A           2809 	mov	b,#0x0a
   0DA6 EE                 2810 	mov	a,r6
   0DA7 30 E7 04           2811 	jnb	acc.7,00503$
   0DAA B2 D5              2812 	cpl	F0
   0DAC F4                 2813 	cpl	a
   0DAD 04                 2814 	inc	a
   0DAE                    2815 00503$:
   0DAE 84                 2816 	div	ab
   0DAF 30 D5 02           2817 	jnb	F0,00504$
   0DB2 F4                 2818 	cpl	a
   0DB3 04                 2819 	inc	a
   0DB4                    2820 00504$:
   0DB4 FE                 2821 	mov	r6,a
   0DB5 C0 07              2822 	push	ar7
   0DB7 C0 00              2823 	push	ar0
   0DB9 C0 01              2824 	push	ar1
   0DBB C0 06              2825 	push	ar6
   0DBD 75 82 06           2826 	mov	dpl,#0x06
   0DC0 12s00r3D           2827 	lcall	_Write7219
   0DC3 15 81              2828 	dec	sp
   0DC5 D0 01              2829 	pop	ar1
   0DC7 D0 00              2830 	pop	ar0
   0DC9 D0 07              2831 	pop	ar7
                           2832 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:375: Write7219(5, open_close_time[4] % 10);
   0DCB C0 00              2833 	push	ar0
   0DCD E5*00              2834 	mov	a,_bp
   0DCF 24 0B              2835 	add	a,#0x0b
   0DD1 F8                 2836 	mov	r0,a
   0DD2 86 00              2837 	mov	ar0,@r0
   0DD4 86 06              2838 	mov	ar6,@r0
   0DD6 D0 00              2839 	pop	ar0
   0DD8 75 F0 0A           2840 	mov	b,#0x0a
   0DDB EE                 2841 	mov	a,r6
   0DDC C2 D5              2842 	clr	F0
   0DDE 30 E7 04           2843 	jnb	acc.7,00505$
   0DE1 D2 D5              2844 	setb	F0
   0DE3 F4                 2845 	cpl	a
   0DE4 04                 2846 	inc	a
   0DE5                    2847 00505$:
   0DE5 84                 2848 	div	ab
   0DE6 E5 F0              2849 	mov	a,b
   0DE8 30 D5 02           2850 	jnb	F0,00506$
   0DEB F4                 2851 	cpl	a
   0DEC 04                 2852 	inc	a
   0DED                    2853 00506$:
   0DED FE                 2854 	mov	r6,a
   0DEE C0 07              2855 	push	ar7
   0DF0 C0 00              2856 	push	ar0
   0DF2 C0 01              2857 	push	ar1
   0DF4 C0 06              2858 	push	ar6
   0DF6 75 82 05           2859 	mov	dpl,#0x05
   0DF9 12s00r3D           2860 	lcall	_Write7219
   0DFC 15 81              2861 	dec	sp
   0DFE D0 01              2862 	pop	ar1
   0E00 D0 00              2863 	pop	ar0
   0E02 D0 07              2864 	pop	ar7
   0E04 80 24              2865 	sjmp	00236$
   0E06                    2866 00235$:
                           2867 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:377: Write7219(6, 0x0f);
   0E06 C0 07              2868 	push	ar7
   0E08 C0 00              2869 	push	ar0
   0E0A C0 01              2870 	push	ar1
   0E0C 74 0F              2871 	mov	a,#0x0F
   0E0E C0 E0              2872 	push	acc
   0E10 75 82 06           2873 	mov	dpl,#0x06
   0E13 12s00r3D           2874 	lcall	_Write7219
   0E16 15 81              2875 	dec	sp
                           2876 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:378: Write7219(5, 0x0f); 
   0E18 74 0F              2877 	mov	a,#0x0F
   0E1A C0 E0              2878 	push	acc
   0E1C 75 82 05           2879 	mov	dpl,#0x05
   0E1F 12s00r3D           2880 	lcall	_Write7219
   0E22 15 81              2881 	dec	sp
   0E24 D0 01              2882 	pop	ar1
   0E26 D0 00              2883 	pop	ar0
   0E28 D0 07              2884 	pop	ar7
   0E2A                    2885 00236$:
                           2886 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:380: Write7219(8, open_close_time[3] / 10);
   0E2A C0 00              2887 	push	ar0
   0E2C E5*00              2888 	mov	a,_bp
   0E2E 24 0A              2889 	add	a,#0x0a
   0E30 F8                 2890 	mov	r0,a
   0E31 86 00              2891 	mov	ar0,@r0
   0E33 86 06              2892 	mov	ar6,@r0
   0E35 D0 00              2893 	pop	ar0
   0E37 C2 D5              2894 	clr	F0
   0E39 75 F0 0A           2895 	mov	b,#0x0a
   0E3C EE                 2896 	mov	a,r6
   0E3D 30 E7 04           2897 	jnb	acc.7,00507$
   0E40 B2 D5              2898 	cpl	F0
   0E42 F4                 2899 	cpl	a
   0E43 04                 2900 	inc	a
   0E44                    2901 00507$:
   0E44 84                 2902 	div	ab
   0E45 30 D5 02           2903 	jnb	F0,00508$
   0E48 F4                 2904 	cpl	a
   0E49 04                 2905 	inc	a
   0E4A                    2906 00508$:
   0E4A FE                 2907 	mov	r6,a
   0E4B C0 07              2908 	push	ar7
   0E4D C0 00              2909 	push	ar0
   0E4F C0 01              2910 	push	ar1
   0E51 C0 06              2911 	push	ar6
   0E53 75 82 08           2912 	mov	dpl,#0x08
   0E56 12s00r3D           2913 	lcall	_Write7219
   0E59 15 81              2914 	dec	sp
   0E5B D0 01              2915 	pop	ar1
   0E5D D0 00              2916 	pop	ar0
   0E5F D0 07              2917 	pop	ar7
                           2918 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:381: Write7219(7, open_close_time[3] % 10); 
   0E61 C0 00              2919 	push	ar0
   0E63 E5*00              2920 	mov	a,_bp
   0E65 24 0A              2921 	add	a,#0x0a
   0E67 F8                 2922 	mov	r0,a
   0E68 86 00              2923 	mov	ar0,@r0
   0E6A 86 06              2924 	mov	ar6,@r0
   0E6C D0 00              2925 	pop	ar0
   0E6E 75 F0 0A           2926 	mov	b,#0x0a
   0E71 EE                 2927 	mov	a,r6
   0E72 C2 D5              2928 	clr	F0
   0E74 30 E7 04           2929 	jnb	acc.7,00509$
   0E77 D2 D5              2930 	setb	F0
   0E79 F4                 2931 	cpl	a
   0E7A 04                 2932 	inc	a
   0E7B                    2933 00509$:
   0E7B 84                 2934 	div	ab
   0E7C E5 F0              2935 	mov	a,b
   0E7E 30 D5 02           2936 	jnb	F0,00510$
   0E81 F4                 2937 	cpl	a
   0E82 04                 2938 	inc	a
   0E83                    2939 00510$:
   0E83 FE                 2940 	mov	r6,a
   0E84 C0 07              2941 	push	ar7
   0E86 C0 00              2942 	push	ar0
   0E88 C0 01              2943 	push	ar1
   0E8A C0 06              2944 	push	ar6
   0E8C 75 82 07           2945 	mov	dpl,#0x07
   0E8F 12s00r3D           2946 	lcall	_Write7219
   0E92 15 81              2947 	dec	sp
   0E94 D0 01              2948 	pop	ar1
   0E96 D0 00              2949 	pop	ar0
   0E98 D0 07              2950 	pop	ar7
                           2951 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:382: Write7219(4, open_close_time[5] / 10);
   0E9A C0 00              2952 	push	ar0
   0E9C E5*00              2953 	mov	a,_bp
   0E9E 24 0C              2954 	add	a,#0x0c
   0EA0 F8                 2955 	mov	r0,a
   0EA1 86 00              2956 	mov	ar0,@r0
   0EA3 86 06              2957 	mov	ar6,@r0
   0EA5 D0 00              2958 	pop	ar0
   0EA7 C2 D5              2959 	clr	F0
   0EA9 75 F0 0A           2960 	mov	b,#0x0a
   0EAC EE                 2961 	mov	a,r6
   0EAD 30 E7 04           2962 	jnb	acc.7,00511$
   0EB0 B2 D5              2963 	cpl	F0
   0EB2 F4                 2964 	cpl	a
   0EB3 04                 2965 	inc	a
   0EB4                    2966 00511$:
   0EB4 84                 2967 	div	ab
   0EB5 30 D5 02           2968 	jnb	F0,00512$
   0EB8 F4                 2969 	cpl	a
   0EB9 04                 2970 	inc	a
   0EBA                    2971 00512$:
   0EBA FE                 2972 	mov	r6,a
   0EBB C0 07              2973 	push	ar7
   0EBD C0 00              2974 	push	ar0
   0EBF C0 01              2975 	push	ar1
   0EC1 C0 06              2976 	push	ar6
   0EC3 75 82 04           2977 	mov	dpl,#0x04
   0EC6 12s00r3D           2978 	lcall	_Write7219
   0EC9 15 81              2979 	dec	sp
   0ECB D0 01              2980 	pop	ar1
   0ECD D0 00              2981 	pop	ar0
   0ECF D0 07              2982 	pop	ar7
                           2983 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:383: Write7219(3, open_close_time[5] % 10);
   0ED1 C0 00              2984 	push	ar0
   0ED3 E5*00              2985 	mov	a,_bp
   0ED5 24 0C              2986 	add	a,#0x0c
   0ED7 F8                 2987 	mov	r0,a
   0ED8 86 00              2988 	mov	ar0,@r0
   0EDA 86 06              2989 	mov	ar6,@r0
   0EDC D0 00              2990 	pop	ar0
   0EDE 75 F0 0A           2991 	mov	b,#0x0a
   0EE1 EE                 2992 	mov	a,r6
   0EE2 C2 D5              2993 	clr	F0
   0EE4 30 E7 04           2994 	jnb	acc.7,00513$
   0EE7 D2 D5              2995 	setb	F0
   0EE9 F4                 2996 	cpl	a
   0EEA 04                 2997 	inc	a
   0EEB                    2998 00513$:
   0EEB 84                 2999 	div	ab
   0EEC E5 F0              3000 	mov	a,b
   0EEE 30 D5 02           3001 	jnb	F0,00514$
   0EF1 F4                 3002 	cpl	a
   0EF2 04                 3003 	inc	a
   0EF3                    3004 00514$:
   0EF3 FE                 3005 	mov	r6,a
   0EF4 C0 07              3006 	push	ar7
   0EF6 C0 00              3007 	push	ar0
   0EF8 C0 01              3008 	push	ar1
   0EFA C0 06              3009 	push	ar6
   0EFC 75 82 03           3010 	mov	dpl,#0x03
   0EFF 12s00r3D           3011 	lcall	_Write7219
   0F02 15 81              3012 	dec	sp
   0F04 D0 01              3013 	pop	ar1
   0F06 D0 00              3014 	pop	ar0
   0F08 D0 07              3015 	pop	ar7
   0F0A 02s10r9F           3016 	ljmp	00247$
   0F0D                    3017 00243$:
                           3018 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:384: } else if (mode2_change_place == 5) {
   0F0D C0 00              3019 	push	ar0
   0F0F A8*00              3020 	mov	r0,_bp
   0F11 08                 3021 	inc	r0
   0F12 B6 05 02           3022 	cjne	@r0,#0x05,00515$
   0F15 80 05              3023 	sjmp	00516$
   0F17                    3024 00515$:
   0F17 D0 00              3025 	pop	ar0
   0F19 02s10r9F           3026 	ljmp	00247$
   0F1C                    3027 00516$:
   0F1C D0 00              3028 	pop	ar0
                           3029 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:385: if (time_count >= 50) {
   0F1E C3                 3030 	clr	c
   0F1F E5*08              3031 	mov	a,_time_count
   0F21 94 32              3032 	subb	a,#0x32
   0F23 E5*09              3033 	mov	a,(_time_count + 1)
   0F25 94 00              3034 	subb	a,#0x00
   0F27 40 72              3035 	jc	00238$
                           3036 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:386: Write7219(4, open_close_time[5] / 10);
   0F29 C0 00              3037 	push	ar0
   0F2B E5*00              3038 	mov	a,_bp
   0F2D 24 0C              3039 	add	a,#0x0c
   0F2F F8                 3040 	mov	r0,a
   0F30 86 00              3041 	mov	ar0,@r0
   0F32 86 06              3042 	mov	ar6,@r0
   0F34 D0 00              3043 	pop	ar0
   0F36 C2 D5              3044 	clr	F0
   0F38 75 F0 0A           3045 	mov	b,#0x0a
   0F3B EE                 3046 	mov	a,r6
   0F3C 30 E7 04           3047 	jnb	acc.7,00518$
   0F3F B2 D5              3048 	cpl	F0
   0F41 F4                 3049 	cpl	a
   0F42 04                 3050 	inc	a
   0F43                    3051 00518$:
   0F43 84                 3052 	div	ab
   0F44 30 D5 02           3053 	jnb	F0,00519$
   0F47 F4                 3054 	cpl	a
   0F48 04                 3055 	inc	a
   0F49                    3056 00519$:
   0F49 FE                 3057 	mov	r6,a
   0F4A C0 07              3058 	push	ar7
   0F4C C0 00              3059 	push	ar0
   0F4E C0 01              3060 	push	ar1
   0F50 C0 06              3061 	push	ar6
   0F52 75 82 04           3062 	mov	dpl,#0x04
   0F55 12s00r3D           3063 	lcall	_Write7219
   0F58 15 81              3064 	dec	sp
   0F5A D0 01              3065 	pop	ar1
   0F5C D0 00              3066 	pop	ar0
   0F5E D0 07              3067 	pop	ar7
                           3068 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:387: Write7219(3, open_close_time[5] % 10);
   0F60 C0 00              3069 	push	ar0
   0F62 E5*00              3070 	mov	a,_bp
   0F64 24 0C              3071 	add	a,#0x0c
   0F66 F8                 3072 	mov	r0,a
   0F67 86 00              3073 	mov	ar0,@r0
   0F69 86 06              3074 	mov	ar6,@r0
   0F6B D0 00              3075 	pop	ar0
   0F6D 75 F0 0A           3076 	mov	b,#0x0a
   0F70 EE                 3077 	mov	a,r6
   0F71 C2 D5              3078 	clr	F0
   0F73 30 E7 04           3079 	jnb	acc.7,00520$
   0F76 D2 D5              3080 	setb	F0
   0F78 F4                 3081 	cpl	a
   0F79 04                 3082 	inc	a
   0F7A                    3083 00520$:
   0F7A 84                 3084 	div	ab
   0F7B E5 F0              3085 	mov	a,b
   0F7D 30 D5 02           3086 	jnb	F0,00521$
   0F80 F4                 3087 	cpl	a
   0F81 04                 3088 	inc	a
   0F82                    3089 00521$:
   0F82 FE                 3090 	mov	r6,a
   0F83 C0 07              3091 	push	ar7
   0F85 C0 00              3092 	push	ar0
   0F87 C0 01              3093 	push	ar1
   0F89 C0 06              3094 	push	ar6
   0F8B 75 82 03           3095 	mov	dpl,#0x03
   0F8E 12s00r3D           3096 	lcall	_Write7219
   0F91 15 81              3097 	dec	sp
   0F93 D0 01              3098 	pop	ar1
   0F95 D0 00              3099 	pop	ar0
   0F97 D0 07              3100 	pop	ar7
   0F99 80 24              3101 	sjmp	00239$
   0F9B                    3102 00238$:
                           3103 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:389: Write7219(4, 0x0f);
   0F9B C0 07              3104 	push	ar7
   0F9D C0 00              3105 	push	ar0
   0F9F C0 01              3106 	push	ar1
   0FA1 74 0F              3107 	mov	a,#0x0F
   0FA3 C0 E0              3108 	push	acc
   0FA5 75 82 04           3109 	mov	dpl,#0x04
   0FA8 12s00r3D           3110 	lcall	_Write7219
   0FAB 15 81              3111 	dec	sp
                           3112 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:390: Write7219(3, 0x0f); 
   0FAD 74 0F              3113 	mov	a,#0x0F
   0FAF C0 E0              3114 	push	acc
   0FB1 75 82 03           3115 	mov	dpl,#0x03
   0FB4 12s00r3D           3116 	lcall	_Write7219
   0FB7 15 81              3117 	dec	sp
   0FB9 D0 01              3118 	pop	ar1
   0FBB D0 00              3119 	pop	ar0
   0FBD D0 07              3120 	pop	ar7
   0FBF                    3121 00239$:
                           3122 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:392: Write7219(5, open_close_time[4] % 10);
   0FBF C0 00              3123 	push	ar0
   0FC1 E5*00              3124 	mov	a,_bp
   0FC3 24 0B              3125 	add	a,#0x0b
   0FC5 F8                 3126 	mov	r0,a
   0FC6 86 00              3127 	mov	ar0,@r0
   0FC8 86 06              3128 	mov	ar6,@r0
   0FCA D0 00              3129 	pop	ar0
   0FCC 75 F0 0A           3130 	mov	b,#0x0a
   0FCF EE                 3131 	mov	a,r6
   0FD0 C2 D5              3132 	clr	F0
   0FD2 30 E7 04           3133 	jnb	acc.7,00522$
   0FD5 D2 D5              3134 	setb	F0
   0FD7 F4                 3135 	cpl	a
   0FD8 04                 3136 	inc	a
   0FD9                    3137 00522$:
   0FD9 84                 3138 	div	ab
   0FDA E5 F0              3139 	mov	a,b
   0FDC 30 D5 02           3140 	jnb	F0,00523$
   0FDF F4                 3141 	cpl	a
   0FE0 04                 3142 	inc	a
   0FE1                    3143 00523$:
   0FE1 FE                 3144 	mov	r6,a
   0FE2 C0 07              3145 	push	ar7
   0FE4 C0 00              3146 	push	ar0
   0FE6 C0 01              3147 	push	ar1
   0FE8 C0 06              3148 	push	ar6
   0FEA 75 82 05           3149 	mov	dpl,#0x05
   0FED 12s00r3D           3150 	lcall	_Write7219
   0FF0 15 81              3151 	dec	sp
   0FF2 D0 01              3152 	pop	ar1
   0FF4 D0 00              3153 	pop	ar0
   0FF6 D0 07              3154 	pop	ar7
                           3155 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:393: Write7219(6, open_close_time[4] / 10);
   0FF8 C0 00              3156 	push	ar0
   0FFA E5*00              3157 	mov	a,_bp
   0FFC 24 0B              3158 	add	a,#0x0b
   0FFE F8                 3159 	mov	r0,a
   0FFF 86 00              3160 	mov	ar0,@r0
   1001 86 06              3161 	mov	ar6,@r0
   1003 D0 00              3162 	pop	ar0
   1005 C2 D5              3163 	clr	F0
   1007 75 F0 0A           3164 	mov	b,#0x0a
   100A EE                 3165 	mov	a,r6
   100B 30 E7 04           3166 	jnb	acc.7,00524$
   100E B2 D5              3167 	cpl	F0
   1010 F4                 3168 	cpl	a
   1011 04                 3169 	inc	a
   1012                    3170 00524$:
   1012 84                 3171 	div	ab
   1013 30 D5 02           3172 	jnb	F0,00525$
   1016 F4                 3173 	cpl	a
   1017 04                 3174 	inc	a
   1018                    3175 00525$:
   1018 FE                 3176 	mov	r6,a
   1019 C0 07              3177 	push	ar7
   101B C0 00              3178 	push	ar0
   101D C0 01              3179 	push	ar1
   101F C0 06              3180 	push	ar6
   1021 75 82 06           3181 	mov	dpl,#0x06
   1024 12s00r3D           3182 	lcall	_Write7219
   1027 15 81              3183 	dec	sp
   1029 D0 01              3184 	pop	ar1
   102B D0 00              3185 	pop	ar0
   102D D0 07              3186 	pop	ar7
                           3187 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:394: Write7219(7, open_close_time[3] % 10); 
   102F C0 00              3188 	push	ar0
   1031 E5*00              3189 	mov	a,_bp
   1033 24 0A              3190 	add	a,#0x0a
   1035 F8                 3191 	mov	r0,a
   1036 86 00              3192 	mov	ar0,@r0
   1038 86 06              3193 	mov	ar6,@r0
   103A D0 00              3194 	pop	ar0
   103C 75 F0 0A           3195 	mov	b,#0x0a
   103F EE                 3196 	mov	a,r6
   1040 C2 D5              3197 	clr	F0
   1042 30 E7 04           3198 	jnb	acc.7,00526$
   1045 D2 D5              3199 	setb	F0
   1047 F4                 3200 	cpl	a
   1048 04                 3201 	inc	a
   1049                    3202 00526$:
   1049 84                 3203 	div	ab
   104A E5 F0              3204 	mov	a,b
   104C 30 D5 02           3205 	jnb	F0,00527$
   104F F4                 3206 	cpl	a
   1050 04                 3207 	inc	a
   1051                    3208 00527$:
   1051 FE                 3209 	mov	r6,a
   1052 C0 07              3210 	push	ar7
   1054 C0 00              3211 	push	ar0
   1056 C0 01              3212 	push	ar1
   1058 C0 06              3213 	push	ar6
   105A 75 82 07           3214 	mov	dpl,#0x07
   105D 12s00r3D           3215 	lcall	_Write7219
   1060 15 81              3216 	dec	sp
   1062 D0 01              3217 	pop	ar1
   1064 D0 00              3218 	pop	ar0
   1066 D0 07              3219 	pop	ar7
                           3220 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:395: Write7219(8, open_close_time[3] / 10);
   1068 C0 00              3221 	push	ar0
   106A E5*00              3222 	mov	a,_bp
   106C 24 0A              3223 	add	a,#0x0a
   106E F8                 3224 	mov	r0,a
   106F 86 00              3225 	mov	ar0,@r0
   1071 86 06              3226 	mov	ar6,@r0
   1073 D0 00              3227 	pop	ar0
   1075 C2 D5              3228 	clr	F0
   1077 75 F0 0A           3229 	mov	b,#0x0a
   107A EE                 3230 	mov	a,r6
   107B 30 E7 04           3231 	jnb	acc.7,00528$
   107E B2 D5              3232 	cpl	F0
   1080 F4                 3233 	cpl	a
   1081 04                 3234 	inc	a
   1082                    3235 00528$:
   1082 84                 3236 	div	ab
   1083 30 D5 02           3237 	jnb	F0,00529$
   1086 F4                 3238 	cpl	a
   1087 04                 3239 	inc	a
   1088                    3240 00529$:
   1088 FE                 3241 	mov	r6,a
   1089 C0 07              3242 	push	ar7
   108B C0 00              3243 	push	ar0
   108D C0 01              3244 	push	ar1
   108F C0 06              3245 	push	ar6
   1091 75 82 08           3246 	mov	dpl,#0x08
   1094 12s00r3D           3247 	lcall	_Write7219
   1097 15 81              3248 	dec	sp
   1099 D0 01              3249 	pop	ar1
   109B D0 00              3250 	pop	ar0
   109D D0 07              3251 	pop	ar7
   109F                    3252 00247$:
                           3253 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:397: Write7219(2, 2);
   109F C0 07              3254 	push	ar7
   10A1 C0 00              3255 	push	ar0
   10A3 C0 01              3256 	push	ar1
   10A5 74 02              3257 	mov	a,#0x02
   10A7 C0 E0              3258 	push	acc
   10A9 75 82 02           3259 	mov	dpl,#0x02
   10AC 12s00r3D           3260 	lcall	_Write7219
   10AF 15 81              3261 	dec	sp
   10B1 D0 01              3262 	pop	ar1
   10B3 D0 00              3263 	pop	ar0
   10B5 D0 07              3264 	pop	ar7
   10B7                    3265 00250$:
                           3266 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:399: Write7219(1, 2);
   10B7 C0 07              3267 	push	ar7
   10B9 C0 00              3268 	push	ar0
   10BB C0 01              3269 	push	ar1
   10BD 74 02              3270 	mov	a,#0x02
   10BF C0 E0              3271 	push	acc
   10C1 75 82 01           3272 	mov	dpl,#0x01
   10C4 12s00r3D           3273 	lcall	_Write7219
   10C7 15 81              3274 	dec	sp
   10C9 D0 01              3275 	pop	ar1
   10CB D0 00              3276 	pop	ar0
   10CD D0 07              3277 	pop	ar7
                           3278 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:400: if (open_close_time[0] == T_hour && open_close_time[1] == T_min && open_close_time[2] == T_sec) {
   10CF E6                 3279 	mov	a,@r0
   10D0 FE                 3280 	mov	r6,a
   10D1 B5*0A 26           3281 	cjne	a,_T_hour,00256$
   10D4 E7                 3282 	mov	a,@r1
   10D5 FE                 3283 	mov	r6,a
   10D6 B5*0B 21           3284 	cjne	a,_T_min,00256$
   10D9 C0 00              3285 	push	ar0
   10DB A8 07              3286 	mov	r0,ar7
   10DD 86 06              3287 	mov	ar6,@r0
   10DF D0 00              3288 	pop	ar0
   10E1 EE                 3289 	mov	a,r6
   10E2 B5*0C 15           3290 	cjne	a,_T_sec,00256$
                           3291 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:401: server_action(1);
   10E5 90 00 01           3292 	mov	dptr,#0x0001
   10E8 C0 07              3293 	push	ar7
   10EA C0 00              3294 	push	ar0
   10EC C0 01              3295 	push	ar1
   10EE 12s02r05           3296 	lcall	_server_action
   10F1 D0 01              3297 	pop	ar1
   10F3 D0 00              3298 	pop	ar0
   10F5 D0 07              3299 	pop	ar7
   10F7 02s12rEE           3300 	ljmp	00271$
   10FA                    3301 00256$:
                           3302 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:402: } else if (open_close_time[3] == T_hour && open_close_time[4] == T_min && open_close_time[5] == T_sec) {
   10FA C0 00              3303 	push	ar0
   10FC E5*00              3304 	mov	a,_bp
   10FE 24 0A              3305 	add	a,#0x0a
   1100 F8                 3306 	mov	r0,a
   1101 86 00              3307 	mov	ar0,@r0
   1103 86 06              3308 	mov	ar6,@r0
   1105 D0 00              3309 	pop	ar0
   1107 EE                 3310 	mov	a,r6
   1108 B5*0A 02           3311 	cjne	a,_T_hour,00536$
   110B 80 03              3312 	sjmp	00537$
   110D                    3313 00536$:
   110D 02s12rEE           3314 	ljmp	00271$
   1110                    3315 00537$:
   1110 C0 00              3316 	push	ar0
   1112 E5*00              3317 	mov	a,_bp
   1114 24 0B              3318 	add	a,#0x0b
   1116 F8                 3319 	mov	r0,a
   1117 86 00              3320 	mov	ar0,@r0
   1119 86 06              3321 	mov	ar6,@r0
   111B D0 00              3322 	pop	ar0
   111D EE                 3323 	mov	a,r6
   111E B5*0B 02           3324 	cjne	a,_T_min,00538$
   1121 80 03              3325 	sjmp	00539$
   1123                    3326 00538$:
   1123 02s12rEE           3327 	ljmp	00271$
   1126                    3328 00539$:
   1126 C0 00              3329 	push	ar0
   1128 E5*00              3330 	mov	a,_bp
   112A 24 0C              3331 	add	a,#0x0c
   112C F8                 3332 	mov	r0,a
   112D 86 00              3333 	mov	ar0,@r0
   112F 86 06              3334 	mov	ar6,@r0
   1131 D0 00              3335 	pop	ar0
   1133 EE                 3336 	mov	a,r6
   1134 B5*0C 02           3337 	cjne	a,_T_sec,00540$
   1137 80 03              3338 	sjmp	00541$
   1139                    3339 00540$:
   1139 02s12rEE           3340 	ljmp	00271$
   113C                    3341 00541$:
                           3342 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:403: server_action(2);
   113C 90 00 02           3343 	mov	dptr,#0x0002
   113F C0 07              3344 	push	ar7
   1141 C0 00              3345 	push	ar0
   1143 C0 01              3346 	push	ar1
   1145 12s02r05           3347 	lcall	_server_action
   1148 D0 01              3348 	pop	ar1
   114A D0 00              3349 	pop	ar0
   114C D0 07              3350 	pop	ar7
   114E 02s12rEE           3351 	ljmp	00271$
   1151                    3352 00267$:
                           3353 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:405: } else if (mode == 3 || mode == 4) { // 顯示當前時間
   1151 C0 00              3354 	push	ar0
   1153 E5*00              3355 	mov	a,_bp
   1155 24 08              3356 	add	a,#0x08
   1157 F8                 3357 	mov	r0,a
   1158 E4                 3358 	clr	a
   1159 B6 03 01           3359 	cjne	@r0,#0x03,00542$
   115C 04                 3360 	inc	a
   115D                    3361 00542$:
   115D FE                 3362 	mov	r6,a
   115E D0 00              3363 	pop	ar0
   1160 EE                 3364 	mov	a,r6
   1161 70 13              3365 	jnz	00263$
   1163 C0 00              3366 	push	ar0
   1165 E5*00              3367 	mov	a,_bp
   1167 24 08              3368 	add	a,#0x08
   1169 F8                 3369 	mov	r0,a
   116A B6 04 02           3370 	cjne	@r0,#0x04,00545$
   116D 80 05              3371 	sjmp	00546$
   116F                    3372 00545$:
   116F D0 00              3373 	pop	ar0
   1171 02s12rEE           3374 	ljmp	00271$
   1174                    3375 00546$:
   1174 D0 00              3376 	pop	ar0
   1176                    3377 00263$:
                           3378 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:406: Write7219(8, T_hour / 10);
   1176 C0 07              3379 	push	ar7
   1178 C2 D5              3380 	clr	F0
   117A 75 F0 0A           3381 	mov	b,#0x0a
   117D E5*0A              3382 	mov	a,_T_hour
   117F 30 E7 04           3383 	jnb	acc.7,00547$
   1182 B2 D5              3384 	cpl	F0
   1184 F4                 3385 	cpl	a
   1185 04                 3386 	inc	a
   1186                    3387 00547$:
   1186 84                 3388 	div	ab
   1187 30 D5 02           3389 	jnb	F0,00548$
   118A F4                 3390 	cpl	a
   118B 04                 3391 	inc	a
   118C                    3392 00548$:
   118C FF                 3393 	mov	r7,a
   118D C0 06              3394 	push	ar6
   118F C0 07              3395 	push	ar7
   1191 C0 00              3396 	push	ar0
   1193 C0 01              3397 	push	ar1
   1195 C0 07              3398 	push	ar7
   1197 75 82 08           3399 	mov	dpl,#0x08
   119A 12s00r3D           3400 	lcall	_Write7219
   119D 15 81              3401 	dec	sp
   119F D0 01              3402 	pop	ar1
   11A1 D0 00              3403 	pop	ar0
   11A3 D0 07              3404 	pop	ar7
   11A5 D0 06              3405 	pop	ar6
                           3406 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:407: Write7219(7, T_hour % 10);
   11A7 75 F0 0A           3407 	mov	b,#0x0a
   11AA E5*0A              3408 	mov	a,_T_hour
   11AC C2 D5              3409 	clr	F0
   11AE 30 E7 04           3410 	jnb	acc.7,00549$
   11B1 D2 D5              3411 	setb	F0
   11B3 F4                 3412 	cpl	a
   11B4 04                 3413 	inc	a
   11B5                    3414 00549$:
   11B5 84                 3415 	div	ab
   11B6 E5 F0              3416 	mov	a,b
   11B8 30 D5 02           3417 	jnb	F0,00550$
   11BB F4                 3418 	cpl	a
   11BC 04                 3419 	inc	a
   11BD                    3420 00550$:
   11BD FF                 3421 	mov	r7,a
   11BE C0 06              3422 	push	ar6
   11C0 C0 07              3423 	push	ar7
   11C2 C0 00              3424 	push	ar0
   11C4 C0 01              3425 	push	ar1
   11C6 C0 07              3426 	push	ar7
   11C8 75 82 07           3427 	mov	dpl,#0x07
   11CB 12s00r3D           3428 	lcall	_Write7219
   11CE 15 81              3429 	dec	sp
   11D0 D0 01              3430 	pop	ar1
   11D2 D0 00              3431 	pop	ar0
   11D4 D0 07              3432 	pop	ar7
   11D6 D0 06              3433 	pop	ar6
                           3434 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:408: Write7219(6, T_min / 10);
   11D8 C2 D5              3435 	clr	F0
   11DA 75 F0 0A           3436 	mov	b,#0x0a
   11DD E5*0B              3437 	mov	a,_T_min
   11DF 30 E7 04           3438 	jnb	acc.7,00551$
   11E2 B2 D5              3439 	cpl	F0
   11E4 F4                 3440 	cpl	a
   11E5 04                 3441 	inc	a
   11E6                    3442 00551$:
   11E6 84                 3443 	div	ab
   11E7 30 D5 02           3444 	jnb	F0,00552$
   11EA F4                 3445 	cpl	a
   11EB 04                 3446 	inc	a
   11EC                    3447 00552$:
   11EC FF                 3448 	mov	r7,a
   11ED C0 06              3449 	push	ar6
   11EF C0 07              3450 	push	ar7
   11F1 C0 00              3451 	push	ar0
   11F3 C0 01              3452 	push	ar1
   11F5 C0 07              3453 	push	ar7
   11F7 75 82 06           3454 	mov	dpl,#0x06
   11FA 12s00r3D           3455 	lcall	_Write7219
   11FD 15 81              3456 	dec	sp
   11FF D0 01              3457 	pop	ar1
   1201 D0 00              3458 	pop	ar0
   1203 D0 07              3459 	pop	ar7
   1205 D0 06              3460 	pop	ar6
                           3461 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:409: Write7219(5, T_min % 10);
   1207 75 F0 0A           3462 	mov	b,#0x0a
   120A E5*0B              3463 	mov	a,_T_min
   120C C2 D5              3464 	clr	F0
   120E 30 E7 04           3465 	jnb	acc.7,00553$
   1211 D2 D5              3466 	setb	F0
   1213 F4                 3467 	cpl	a
   1214 04                 3468 	inc	a
   1215                    3469 00553$:
   1215 84                 3470 	div	ab
   1216 E5 F0              3471 	mov	a,b
   1218 30 D5 02           3472 	jnb	F0,00554$
   121B F4                 3473 	cpl	a
   121C 04                 3474 	inc	a
   121D                    3475 00554$:
   121D FF                 3476 	mov	r7,a
   121E C0 06              3477 	push	ar6
   1220 C0 07              3478 	push	ar7
   1222 C0 00              3479 	push	ar0
   1224 C0 01              3480 	push	ar1
   1226 C0 07              3481 	push	ar7
   1228 75 82 05           3482 	mov	dpl,#0x05
   122B 12s00r3D           3483 	lcall	_Write7219
   122E 15 81              3484 	dec	sp
   1230 D0 01              3485 	pop	ar1
   1232 D0 00              3486 	pop	ar0
   1234 D0 07              3487 	pop	ar7
   1236 D0 06              3488 	pop	ar6
                           3489 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:410: Write7219(4, T_sec / 10);
   1238 C2 D5              3490 	clr	F0
   123A 75 F0 0A           3491 	mov	b,#0x0a
   123D E5*0C              3492 	mov	a,_T_sec
   123F 30 E7 04           3493 	jnb	acc.7,00555$
   1242 B2 D5              3494 	cpl	F0
   1244 F4                 3495 	cpl	a
   1245 04                 3496 	inc	a
   1246                    3497 00555$:
   1246 84                 3498 	div	ab
   1247 30 D5 02           3499 	jnb	F0,00556$
   124A F4                 3500 	cpl	a
   124B 04                 3501 	inc	a
   124C                    3502 00556$:
   124C FF                 3503 	mov	r7,a
   124D C0 06              3504 	push	ar6
   124F C0 07              3505 	push	ar7
   1251 C0 00              3506 	push	ar0
   1253 C0 01              3507 	push	ar1
   1255 C0 07              3508 	push	ar7
   1257 75 82 04           3509 	mov	dpl,#0x04
   125A 12s00r3D           3510 	lcall	_Write7219
   125D 15 81              3511 	dec	sp
   125F D0 01              3512 	pop	ar1
   1261 D0 00              3513 	pop	ar0
   1263 D0 07              3514 	pop	ar7
   1265 D0 06              3515 	pop	ar6
                           3516 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:411: Write7219(3, T_sec % 10);
   1267 75 F0 0A           3517 	mov	b,#0x0a
   126A E5*0C              3518 	mov	a,_T_sec
   126C C2 D5              3519 	clr	F0
   126E 30 E7 04           3520 	jnb	acc.7,00557$
   1271 D2 D5              3521 	setb	F0
   1273 F4                 3522 	cpl	a
   1274 04                 3523 	inc	a
   1275                    3524 00557$:
   1275 84                 3525 	div	ab
   1276 E5 F0              3526 	mov	a,b
   1278 30 D5 02           3527 	jnb	F0,00558$
   127B F4                 3528 	cpl	a
   127C 04                 3529 	inc	a
   127D                    3530 00558$:
   127D FF                 3531 	mov	r7,a
   127E C0 06              3532 	push	ar6
   1280 C0 07              3533 	push	ar7
   1282 C0 00              3534 	push	ar0
   1284 C0 01              3535 	push	ar1
   1286 C0 07              3536 	push	ar7
   1288 75 82 03           3537 	mov	dpl,#0x03
   128B 12s00r3D           3538 	lcall	_Write7219
   128E 15 81              3539 	dec	sp
   1290 D0 01              3540 	pop	ar1
   1292 D0 00              3541 	pop	ar0
   1294 D0 07              3542 	pop	ar7
   1296 D0 06              3543 	pop	ar6
                           3544 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:412: if (mode == 3) Write7219(2, 0x0f);
   1298 D0 07              3545 	pop	ar7
   129A EE                 3546 	mov	a,r6
   129B 60 1A              3547 	jz	00261$
   129D C0 07              3548 	push	ar7
   129F C0 00              3549 	push	ar0
   12A1 C0 01              3550 	push	ar1
   12A3 74 0F              3551 	mov	a,#0x0F
   12A5 C0 E0              3552 	push	acc
   12A7 75 82 02           3553 	mov	dpl,#0x02
   12AA 12s00r3D           3554 	lcall	_Write7219
   12AD 15 81              3555 	dec	sp
   12AF D0 01              3556 	pop	ar1
   12B1 D0 00              3557 	pop	ar0
   12B3 D0 07              3558 	pop	ar7
   12B5 80 18              3559 	sjmp	00262$
   12B7                    3560 00261$:
                           3561 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:413: else Write7219(2, 0x7E);
   12B7 C0 07              3562 	push	ar7
   12B9 C0 00              3563 	push	ar0
   12BB C0 01              3564 	push	ar1
   12BD 74 7E              3565 	mov	a,#0x7E
   12BF C0 E0              3566 	push	acc
   12C1 75 82 02           3567 	mov	dpl,#0x02
   12C4 12s00r3D           3568 	lcall	_Write7219
   12C7 15 81              3569 	dec	sp
   12C9 D0 01              3570 	pop	ar1
   12CB D0 00              3571 	pop	ar0
   12CD D0 07              3572 	pop	ar7
   12CF                    3573 00262$:
                           3574 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:414: Write7219(1, mode);
   12CF C0 07              3575 	push	ar7
   12D1 C0 00              3576 	push	ar0
   12D3 C0 01              3577 	push	ar1
   12D5 85 00 F0           3578 	mov	b,ar0
   12D8 E5*00              3579 	mov	a,_bp
   12DA 24 08              3580 	add	a,#0x08
   12DC F8                 3581 	mov	r0,a
   12DD E6                 3582 	mov	a,@r0
   12DE C0 E0              3583 	push	acc
   12E0 75 82 01           3584 	mov	dpl,#0x01
   12E3 12s00r3D           3585 	lcall	_Write7219
   12E6 15 81              3586 	dec	sp
   12E8 D0 01              3587 	pop	ar1
   12EA D0 00              3588 	pop	ar0
   12EC D0 07              3589 	pop	ar7
   12EE                    3590 00271$:
                           3591 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:417: toff = 30000 - ton;
   12EE 74 30              3592 	mov	a,#0x30
   12F0 C3                 3593 	clr	c
   12F1 95*02              3594 	subb	a,_ton
   12F3 F5*04              3595 	mov	_toff,a
   12F5 74 75              3596 	mov	a,#0x75
   12F7 95*03              3597 	subb	a,(_ton + 1)
   12F9 F5*05              3598 	mov	(_toff + 1),a
                           3599 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:418: prebtn0 = INT0;
   12FB A2 B2              3600 	mov	c,_INT0
   12FD E4                 3601 	clr	a
   12FE 33                 3602 	rlc	a
   12FF FA                 3603 	mov	r2,a
                           3604 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:419: prebtn1 = INT1;
   1300 A2 B3              3605 	mov	c,_INT1
   1302 E4                 3606 	clr	a
   1303 33                 3607 	rlc	a
   1304 FB                 3608 	mov	r3,a
                           3609 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:420: prebtn2 = P2_0;
   1305 A2 A0              3610 	mov	c,_P2_0
   1307 E4                 3611 	clr	a
   1308 33                 3612 	rlc	a
   1309 FC                 3613 	mov	r4,a
                           3614 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:421: prebtn3 = P2_1;
   130A A2 A1              3615 	mov	c,_P2_1
   130C E4                 3616 	clr	a
   130D 33                 3617 	rlc	a
   130E FD                 3618 	mov	r5,a
                           3619 ;	C:\HSU-PO~1\MICROP~1\FINAL_~1\main.c:422: delay_ms(20);
   130F 90 00 14           3620 	mov	dptr,#0x0014
   1312 C0 02              3621 	push	ar2
   1314 C0 03              3622 	push	ar3
   1316 C0 04              3623 	push	ar4
   1318 C0 05              3624 	push	ar5
   131A C0 07              3625 	push	ar7
   131C C0 00              3626 	push	ar0
   131E C0 01              3627 	push	ar1
   1320 12s00rBC           3628 	lcall	_delay_ms
   1323 D0 01              3629 	pop	ar1
   1325 D0 00              3630 	pop	ar0
   1327 D0 07              3631 	pop	ar7
   1329 D0 05              3632 	pop	ar5
   132B D0 04              3633 	pop	ar4
   132D D0 03              3634 	pop	ar3
   132F D0 02              3635 	pop	ar2
   1331 02s03r34           3636 	ljmp	00273$
   1334 85*00 81           3637 	mov	sp,_bp
   1337 D0*00              3638 	pop	_bp
   1339 22                 3639 	ret
                           3640 	.area CSEG    (CODE)
                           3641 	.area CONST   (CODE)
                           3642 	.area XINIT   (CODE)
                           3643 	.area CABS    (ABS,CODE)
